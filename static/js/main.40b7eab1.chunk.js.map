{"version":3,"sources":["serviceWorker.ts","utils/error-utils.ts","api/auth-api.ts","features/login/auth-reducer.ts","state/app-reducer.ts","common/Allert.tsx","api/tasks-api.ts","common/AddItemsForm.tsx","common/EditableSpan.tsx","components/task/Task.tsx","state/tasks-reducer.ts","components/todoList/TodoList.tsx","api/todoLists-api.ts","state/todoList-reducer.ts","components/todoLists/TodoLists.tsx","features/login/Login.tsx","components/app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","post","delete","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","console","log","useState","title","setTitle","setError","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onChangeTitle","onDoubleClick","tasksAPI","todoListId","taskId","todolistId","modelTask","put","Task","onChangeTitleHandler","useCallback","newtTitle","changeTaskTitle","task","id","key","className","Completed","Checkbox","checked","newIsDoneValue","changeStatus","New","removeTask","Delete","updateTaskTC","domainModel","getState","tasks","find","t","apiModel","startDate","priority","description","deadline","then","res","resultCode","updateTaskAC","catch","TodoList","demo","addTask","todoList","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodoListTitle","tasksForTodoList","filter","useEffect","setTasksAC","items","removeTodoList","entityStatus","map","Button","todoListsApi","TodoLists","todoLists","auth","removeTaskAC","removeTasksTC","item","addTaskAC","addTaskTC","newFilter","changeTodoListFilterAC","changeTodoListEntityStatusAC","removeTodoListAC","addTodoList","addTodoListTC","changeTitle","newTitle","changeTodoListTitleAC","changeTodoListTitleTC","Grid","container","style","padding","spacing","tl","Paper","backgroundColor","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","name","getFieldProps","FormControlLabel","control","AppWithRedux","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","action","stateCopy","todoListTasks","newTask","newTasksArray","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oHCbOC,EAAuB,SAAIC,EAAuBC,GACvDD,EAAKE,SAASC,OACdF,EAASG,EAAcJ,EAAKE,SAAS,KAErCD,EAASG,EAAc,wBAE3BH,EAASI,EAAe,YAGfC,EAA2B,SAACC,EAA0BN,GAC/DA,EAASG,EAAcG,EAAMC,QAAUD,EAAMC,QAAU,wBACvDP,EAASI,EAAe,Y,iBCKtBI,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAU,WAEf,OAAON,EAASO,IAAT,YAFFD,EAAU,SAIbf,GACV,OAAOS,EAASQ,KAAyC,cAAejB,IAL3De,EAAU,WAQf,OAAON,EAASS,OAAqB,gBChCvCC,EAA4C,CAC9CC,YAAY,GAYHC,EAAkB,SAACC,GAAD,MAC1B,CAACC,KAAM,yBAA0BD,UCDhCH,EAA2C,CAC7CK,OAAQ,OACRjB,MAAO,KACPkB,eAAe,GAyBNpB,EAAiB,SAACmB,GAC3B,MAAO,CAACD,KAAM,iBAAkBC,WAGvBpB,EAAgB,SAACG,GAC1B,MAAO,CAACgB,KAAM,gBAAiBhB,UC3CnC,SAASmB,EAAMC,GACX,OAAO,kBAAC,IAAD,eAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAGjD,SAASG,IAEZ,IAAMvB,EAAQwB,aAAiD,SAAAC,GAAK,OAAIA,EAAMC,IAAI1B,SAC5EN,EAAWiC,cAGXC,EAAc,SAACC,EAA8BC,GAI/CpC,EAASG,EAAc,QAG3B,OACI,kBAACkC,EAAA,EAAD,CAAUC,KAAgB,OAAVhC,EAAgBiC,iBAAkB,IAAMC,QAASN,GAC7D,kBAAC,EAAD,CAAOM,QAASN,EAAaO,SAAS,SACjCnC,I,IC1BLoC,EAOAC,E,mCCCCC,EAAcC,IAAMC,MAAK,YAA2D,IAAhDC,EAA+C,EAA/CA,QAA+C,IAAtCC,gBAAsC,SAC5FC,QAAQC,IAAI,sBADgF,MAGpEC,mBAAS,IAH2D,mBAGvFC,EAHuF,KAGhFC,EAHgF,OAIpEF,mBAAwB,MAJ4C,mBAIvF7C,EAJuF,KAIhFgD,EAJgF,KAMtFC,EAAiB,WACE,KAAjBH,EAAMI,QACNT,EAAQK,GACRC,EAAS,KAETC,EAAS,sBAiBjB,OACI,6BACI,kBAACG,EAAA,EAAD,CAAW7B,QAAQ,WACRP,MAAO+B,EACPM,SAjBK,SAACC,GACrBN,EAASM,EAAEC,cAAcvC,QAiBVwC,WAdO,SAACF,GACV,OAAVrD,GACCgD,EAAS,MAEM,KAAfK,EAAEG,UACFP,KAUWjD,QAASA,EACTyD,MAAM,QACNC,WAAY1D,EACZ0C,SAAUA,IAErB,kBAACiB,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASZ,EAAgBP,SAAUA,GAC3D,kBAACoB,EAAA,EAAD,W,iBCzCHC,EAAexB,IAAMC,MAAK,SAAUpB,GAE7CuB,QAAQC,IAAI,uBAF+D,MAI7CC,oBAAS,GAJoC,mBAItEmB,EAJsE,KAI5DC,EAJ4D,OAKnDpB,mBAASzB,EAAM0B,OALoC,mBAKtEA,EALsE,KAK/DC,EAL+D,KAqB3E,OAAOiB,EACD,kBAACb,EAAA,EAAD,CAAW7B,QAAQ,WACRP,MAAO+B,EACPoB,WAAS,EACTd,SARjB,SAA4BC,GACxBN,EAASM,EAAEC,cAAcvC,QAQZoD,OAdjB,WACIF,GAAY,GACZ7C,EAAMgD,cAActB,MAalB,0BAAMuB,cApBZ,WACIJ,GAAY,GACZlB,EAAS3B,EAAM0B,SAkB2B1B,EAAM0B,U,4BFlC5CV,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KA0CZ,IAAMnC,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,4DACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAIN+D,EAAW,SACXC,GAGL,OADIrE,EAASO,IAAT,UAAsC8D,EAAtC,YAHCD,EAAW,SAMTC,EAAoBzB,GAG3B,OADI5C,EAASQ,KAAT,UAAkD6D,EAAlD,UAAsE,CAACzB,WARtEwB,EAAW,SAWTC,EAAoBC,GAG3B,OADItE,EAASS,OAAT,UAAiC4D,EAAjC,kBAAqDC,KAbpDF,EAAW,SAiBTG,EAAoBD,EAAgBE,GAG3C,OADIxE,EAASyE,IAAT,UAA8BF,EAA9B,kBAAkDD,GAAWE,IG9D5DE,EAAOrC,IAAMC,MAAK,SAAUpB,GAEjCuB,QAAQC,IAAI,eAEhB,IAMMiC,EAAuBC,uBAAY,SAACC,GACtC3D,EAAM4D,gBAAgB5D,EAAM6D,KAAKC,GAAIH,EAAW3D,EAAMmD,cACvD,CAACnD,IAGA,OAAO,yBAAK+D,IAAK/D,EAAM6D,KAAKC,GAChBE,UAAWhE,EAAM6D,KAAKhE,SAAWmB,EAAaiD,UAAW,SAAW,IAC5E,kBAACC,EAAA,EAAD,CAAU1B,MAAO,UACP2B,QAASnE,EAAM6D,KAAKhE,SAAWmB,EAAaiD,UAC5CjC,SAbY,SAACC,GAC3B,IAAImC,EAAiBnC,EAAEC,cAAciC,QACrCnE,EAAMqE,aAAarE,EAAM6D,KAAKC,GAAIM,EAAiBpD,EAAaiD,UAAYjD,EAAasD,IAAKtE,EAAMmD,eAahG,kBAACR,EAAD,CAAcjB,MAAO1B,EAAM6D,KAAKnC,MAAOsB,cAAeS,IACtD,kBAAClB,EAAA,EAAD,CAAYE,QAlBG,kBAAMzC,EAAMuE,WAAWvE,EAAM6D,KAAKC,GAAI9D,EAAMmD,cAmBvD,kBAACqB,EAAA,EAAD,W,QCGVhF,EAA+B,GA+IxBiF,GAAe,SAACrB,EAAgBsB,EAAwCvB,GACjF,OAAO,SAAC7E,EAAmCqG,GACvCrG,EAASI,EAAe,YACxB,IAAMmF,EAAOc,IAAWC,MAAMzB,GAAY0B,MAAK,SAAAC,GAAC,OAAIA,EAAEhB,KAAOV,KAC7D,GAAKS,EAAL,CAIA,IAAMkB,EAAQ,aACVrD,MAAOmC,EAAKnC,MACZsD,UAAWnB,EAAKmB,UAChBC,SAAUpB,EAAKoB,SACfC,YAAarB,EAAKqB,YAClBC,SAAUtB,EAAKsB,SACftF,OAAQgE,EAAKhE,QACV6E,GAEPxB,EAAoBC,EAAYC,EAAQ2B,GAAUK,MAAK,SAACC,GACxB,IAAxBA,EAAIhH,KAAKiH,YACThH,EAxFY,SAAC8E,EAAgBsB,EAAwCvB,GACjF,MAAO,CACHvD,KAAM,cAAewD,SAAQsB,cAAavB,cAsFzBoC,CAAanC,EAAQsB,EAAavB,IAC3C7E,EAASI,EAAe,eAExBN,EAAqBiH,EAAIhH,KAAMC,MAGlCkH,OAAM,SAAC5G,GACJD,EAAyBC,EAAON,WArBpCiD,QAAQC,IAAI,oCCrKXiE,GAAWtE,IAAMC,MAAK,YAAgD,IAAD,IAApCsE,YAAoC,SAAnB1F,EAAmB,wBAE1EuB,QAAQC,IAAI,mBAGZ,IAAMmE,EAAUjC,uBAAY,SAAChC,GACzB1B,EAAM2F,QAAQ3F,EAAM4F,SAAS9B,GAAIpC,KAClC,CAAC1B,IAEE6F,EAAoBnC,uBAAY,WAClC1D,EAAM8F,aAAa,MAAO9F,EAAM4F,SAAS9B,MAC1C,CAAC9D,IAEE+F,EAAuBrC,uBAAY,WACrC1D,EAAM8F,aAAa,SAAU9F,EAAM4F,SAAS9B,MAC7C,CAAC9D,IAEEgG,EAA0BtC,uBAAY,WACxC1D,EAAM8F,aAAa,YAAa9F,EAAM4F,SAAS9B,MAChD,CAAC9D,IAOEiG,EAAsBvC,uBAAY,SAACC,GACrC3D,EAAMiG,oBAAoBtC,EAAW3D,EAAM4F,SAAS9B,MACrD,CAAC9D,IAEAkG,EAAmBlG,EAAM4E,MAEC,WAA1B5E,EAAM4F,SAASO,SACfD,EAAmBlG,EAAM4E,MAAMuB,QAAO,SAAAtC,GAAI,OAAIA,EAAKhE,SAAWmB,EAAasD,QAEjD,cAA1BtE,EAAM4F,SAASO,SACfD,EAAmBlG,EAAM4E,MAAMuB,QAAO,SAAAtC,GAAI,OAAIA,EAAKhE,SAAWmB,EAAaiD,cAGnF,IAAM3F,EAAWiC,cASb,OAPJ6F,qBAAU,WD0Dc,IAACjD,ECzDjBuC,GAGJpH,GDsDqB6E,ECtDCnD,EAAM4F,SAAS9B,GDuDlC,SAACxF,GACJA,EAASI,EAAe,YACxBwE,EAAkBC,GACbiC,MAAK,SAACC,GACH/G,EA7BU,SAACsG,EAAwBzB,GAC/C,MAAO,CAACvD,KAAM,YAAagF,QAAOzB,cA4BbkD,CAAWhB,EAAIhH,KAAKiI,MAAOnD,IACpC7E,EAASI,EAAe,iBAE3B8G,OAAM,SAAC5G,GACJD,EAAyBC,EAAON,WC9DzC,CAAEoH,EAAMpH,EAAU0B,EAAM4F,SAAS9B,KAEzB,6BACH,yBAAKE,UAAW,iBACZ,4BAAI,kBAACrB,EAAD,CAAcjB,MAAO1B,EAAM4F,SAASlE,MAAOsB,cAAeiD,KAC9D,kBAAC1D,EAAA,EAAD,CAAYE,QA7BG,WACnBzC,EAAMuG,eAAevG,EAAM4F,SAAS9B,KA4BKxC,SAA0C,YAAhCtB,EAAM4F,SAASY,cAC1D,kBAAChC,EAAA,EAAD,QAGR,kBAACtD,EAAD,CAAaG,QAASsE,EAASrE,SAA0C,YAAhCtB,EAAM4F,SAASY,eACxD,6BACKN,EAAiBO,KAAI,SAAA5C,GAAI,OAAI,kBAACL,EAAD,CAC1BO,IAAKF,EAAKC,GACVD,KAAMA,EAAMU,WAAYvE,EAAMuE,WAC9BF,aAAcrE,EAAMqE,aAAclB,WAAYnD,EAAM4F,SAAS9B,GAC7DF,gBAAiB5D,EAAM4D,sBAE/B,6BACI,kBAAC8C,EAAA,EAAD,CAAQxG,QAAmC,QAA1BF,EAAM4F,SAASO,OAAmB,YAAc,OACzD1D,QAASoD,EACTrD,MAAM,WAFd,OAKA,kBAACkE,EAAA,EAAD,CAAQxG,QAAmC,WAA1BF,EAAM4F,SAASO,OAAsB,YAAc,OAC5D1D,QAASsD,EACTvD,MAAM,WAFd,UAKA,kBAACkE,EAAA,EAAD,CAAQxG,QAAmC,cAA1BF,EAAM4F,SAASO,OAAyB,YAAc,OAC/D1D,QAASuD,EACTxD,MAAM,aAFd,kBCpFV1D,GAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINwH,GAAe,SACTxD,EAAoBzB,GAG/B,OADI5C,GAASyE,IAAT,qBAAyCJ,GAAc,CAACzB,MAAOA,KAH9DiF,GAAe,WASpB,OADI7H,GAASO,IAAyB,gBARjCsH,GAAe,SAWTjF,GAGX,OADI5C,GAASQ,KAA0C,aAAc,CAACoC,MAAOA,KAbxEiF,GAAe,SAgBTxD,GAGX,OADIrE,GAASS,OAAT,qBAA4C4D,KCElD3D,GAA0C,G,SClBnCoH,GAAiC,SAAC,GAAkB,IAAD,IAAhBlB,YAAgB,SAEtDmB,EAAYzG,aAAyD,SAAAC,GAAK,OAAIA,EAAMwG,aACpFjC,EAAQxE,aAA8C,SAAAC,GAAK,OAAIA,EAAMuE,SACrEnF,EAAaW,aAAuC,SAAAC,GAAK,OAAIA,EAAMyG,KAAKrH,cACxEnB,EAAWiC,cAGXgE,EAAab,uBAAY,SAAUI,EAAYX,GACjD7E,EJwGqB,SAAC8E,EAAgBD,GAC1C,OAAO,SAAC7E,GACJA,EAASI,EAAe,YACxBwE,EAAoBC,EAAYC,GAC3BgC,MAAK,SAACC,GACyB,IAAxBA,EAAIhH,KAAKiH,YACThH,EAxCQ,SAAC8E,EAAgBD,GACzC,MAAO,CACHvD,KAAM,cACNkE,GAAIV,EACJD,WAAYA,GAoCS4D,CAAa3D,EAAQD,IAC9B7E,EAASI,EAAe,eAExBN,EAAqBiH,EAAIhH,KAAMC,MAGtCkH,OAAM,SAAC5G,GACJD,EAAyBC,EAAON,OIrH/B0I,CAAclD,EAAIX,MAC5B,CAAC7E,IAEEqH,EAAUjC,uBAAY,SAAUP,EAAoBzB,GACtDpD,EJuHiB,SAAC6E,EAAoBzB,GAArB,OAAuC,SAACpD,GAC7DA,EAASI,EAAe,YACxBwE,EAAoBC,EAAYzB,GAC3B0D,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAIhH,KAAKiH,WAAkB,CAC3B,IAAMzB,EAAOwB,EAAIhH,KAAKA,KAAK4I,KAC3B3I,EAnDS,SAACuF,GACtB,MAAO,CAACjE,KAAM,WAAYiE,QAkDLqD,CAAUrD,IACnBvF,EAASI,EAAe,mBAExBN,EAAqBiH,EAAIhH,KAAMC,MAGtCkH,OAAM,SAAC5G,GACJD,EAAyBC,EAAON,OIpI3B6I,CAAUhE,EAAYzB,MAChC,CAACpD,IAEE+F,EAAeX,uBAAY,SAAUI,EAAYjE,EAAsBsD,GACzE7E,EAASmG,GAAaX,EAAI,CAACjE,UAASsD,MACrC,CAAC7E,IAGEwH,EAAepC,uBAAY,SAAU/D,EAAyBwD,GAChE7E,EDiE8B,SAAC8I,EAA6BjE,GAChE,MAAO,CACHvD,KAAM,yBACNuG,OAAQiB,EACRtD,GAAIX,GCrEKkE,CAAuB1H,EAAOwD,MACxC,CAAC7E,IAEEiI,EAAiB7C,uBAAY,SAAUI,GD+FjB,IAACX,EC9FzB7E,GD8FyB6E,EC9FCW,ED+FvB,SAACxF,GACJA,EAASI,EAAe,YACxBJ,EA5BoC,SAAC6E,EAAoBqD,GAC7D,MAAO,CACH5G,KAAM,gCACNuD,aACAqD,gBAwBSc,CAA6BnE,EAAY,YAClDwD,GAA4BxD,GACvBiC,MAAK,SAACC,GACyB,IAAxBA,EAAIhH,KAAKiH,YACThH,EA3DY,SAAC6E,GAC7B,MAAO,CACHvD,KAAM,kBACNkE,GAAIX,GAwDiBoE,CAAiBpE,IAC1B7E,EAASI,EAAe,eAExBN,EAAqBiH,EAAIhH,KAAMC,MAGtCkH,OAAM,SAAC5G,GACJD,EAAyBC,EAAON,WC3GzC,CAACA,IAEEkJ,EAAc9D,uBAAY,SAAUhC,GACtCpD,ED+HqB,SAACoD,GAC1B,OAAO,SAACpD,GACJA,EAASI,EAAe,YACxBiI,GAA4BjF,GACvB0D,MAAK,SAAAC,GAC8B,IAAxBA,EAAIhH,KAAKiH,YACThH,EAvFb,CAACsB,KAAM,eAAgBgG,SAuFaP,EAAIhH,KAAKA,KAAK4I,OACrC3I,EAASI,EAAe,eAExBN,EAAqBiH,EAAIhH,KAAMC,MAI1CkH,OAAM,SAAC5G,GACJD,EAAyBC,EAAON,OC7I/BmJ,CAAc/F,MACxB,CAACpD,IAEEoJ,EAAchE,uBAAY,SAAUI,EAAY6D,EAAkBxE,GACpE7E,EAASmG,GAAaX,EAAI,CAACpC,MAAOiG,GAAWxE,MAC9C,CAAC7E,IAEE2H,EAAsBvC,uBAAY,SAAUiE,EAAkBxE,GAChE7E,EDqG6B,SAACqJ,EAAkBxE,GACpD,OAAO,SAAC7E,GACJA,EAASI,EAAe,YACxBiI,GAA4BxD,EAAYwE,GACnCvC,MAAK,SAACC,GACyB,IAAxBA,EAAIhH,KAAKiH,YACThH,EAlEiB,SAACqJ,EAAkBxE,GACpD,MAAO,CACHvD,KAAM,wBACN8B,MAAOiG,EACP7D,GAAIX,GA8DiByE,CAAsBD,EAAUxE,IACzC7E,EAASI,EAAe,eAExBN,EAAqBiH,EAAIhH,KAAMC,MAGtCkH,OAAM,SAAC5G,GACJD,EAAyBC,EAAON,OClH/BuJ,CAAsBF,EAAUxE,MAC1C,CAAC7E,IAUJ,OARA8H,qBAAU,YACFV,GAASjG,GAGbnB,GD8DG,SAACA,GACJA,EAASI,EAAe,YACxBiI,KACKvB,MAAK,SAACC,GACH/G,EA/CL,CAACsB,KAAM,gBAAiBiH,UA+CKxB,EAAIhH,OAC5BC,EAASI,EAAe,iBAE3B8G,OAAM,SAAC5G,GACJD,EAAyBC,EAAON,WCrEzC,CAACoH,EAAMpH,EAAUmB,IAGfA,EAIE,oCACH,kBAACqI,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,SAC7B,kBAAC/G,EAAD,CAAaG,QAASmG,KAG1B,kBAACM,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,GACrBrB,EAAUJ,KAAI,SAAA0B,GAEN,IAAIjC,EAAmBtB,EAAMuD,EAAGrE,IAEhC,OAAO,kBAACgE,EAAA,EAAD,CAAM/D,IAAKoE,EAAGrE,GAAImD,MAAI,GACzB,kBAACmB,EAAA,EAAD,CAAOJ,MAAO,CAACC,QAAS,OAAQI,gBAAiB,YAC7C,kBAAC5C,GAAD,CACIG,SAAUuC,EACVvD,MAAOsB,EACP3B,WAAYA,EACZuB,aAAcA,EACdH,QAASA,EACTtB,aAAcA,EACdkC,eAAgBA,EAChB3C,gBAAiB8D,EACjBzB,oBAAqBA,EACrBP,KAAMA,WAzBvB,kBAAC,KAAD,CAAU4C,GAAI,Y,0DClEhBC,GAAQ,WASjB,IAAM9I,EAAaW,aAAuC,SAAAC,GAAK,OAAIA,EAAMyG,KAAKrH,cACxEnB,EAAWiC,cAgBXiI,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SApBa,SAACC,GACd,IAAMC,EAAc,GAUpB,OATKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,oBAIdI,EAAOH,WACRI,EAAOJ,SAAW,wBAGfI,GAUPE,SAAU,SAAAH,GZpBK,IAAC1K,EYqBZC,GZrBYD,EYqBK0K,EZrBqB,SAACzK,GAC/CA,EAASI,EAAe,YACxBU,EAAcf,GACT+G,MAAK,SAAAC,GAC0B,IAAxBA,EAAIhH,KAAKiH,YACThH,EAASoB,GAAgB,IACzBpB,EAASI,EAAe,eAExBN,EAAqBiH,EAAIhH,KAAMC,MAGtCkH,OAAM,SAAC5G,GACJD,EAAyBC,EAAON,YYcxC,OAAImB,EACO,kBAAC,KAAD,CAAU6I,GAAI,MAGlB,kBAACR,EAAA,EAAD,CAAMC,WAAS,EAACoB,QAAQ,UAC3B,kBAACrB,EAAA,EAAD,CAAMb,MAAI,EAACmC,GAAI,GACX,0BAAMF,SAAUV,EAAOa,cACnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,sDACI,uBAAGC,KAAM,wCACNC,OAAO,SAASC,IAAI,uBADvB,SAIJ,sEACA,wDACA,8CAEJ,kBAACC,GAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,eACIM,MAAM,QACNuH,OAAO,SACPC,KAAK,SACDrB,EAAOsB,cAAc,WAE5BtB,EAAOQ,OAAOL,MAAQ,yBAAKX,MAAO,CAACxF,MAAO,QAASgG,EAAOQ,OAAOL,OAAe,KACjF,kBAAC5G,EAAA,EAAD,eACInC,KAAK,WACLyC,MAAM,YACFmG,EAAOsB,cAAc,cAE5BtB,EAAOQ,OAAOJ,SAAW,yBAAKZ,MAAO,CAACxF,MAAO,QAASgG,EAAOQ,OAAOJ,UAAkB,KACvF,kBAACmB,GAAA,EAAD,CACI1H,MAAO,cACP2H,QAAS,kBAAC9F,EAAA,EAAD,iBACDsE,EAAOsB,cAAc,cADpB,CAEL3F,QAASqE,EAAOO,OAAOF,gBAG/B,kBAACnC,EAAA,EAAD,CAAQ9G,KAAM,SAAUM,QAAS,YAAasC,MAAO,WAArD,e,UCVTyH,GApDa,SAAC,GAA+B,IAAD,IAA7BvE,YAA6B,SAGjDjG,EAAaW,aAAuC,SAAAC,GAAK,OAAIA,EAAMyG,KAAKrH,cACxEnB,EAAWiC,cAEjB6F,qBAAU,WACN9H,GZ2B6B,SAACA,GAClCc,IAAagG,MAAK,SAAAC,GACc,IAAxBA,EAAIhH,KAAKiH,YACThH,EAASoB,GAAgB,IAI7BpB,EAXG,CAACsB,KAAM,yBAA0BE,eAWR,aY/BhC,IAAMD,EAASO,aAAiD,SAAAC,GAAK,OAAIA,EAAMC,IAAIT,UAQnF,OAPsBO,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,IAAIR,iBAgB5E,kBAAC,KAAD,KACI,yBAAKkE,UAAU,OACX,kBAAC7D,EAAD,MACA,kBAAC+J,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAAC7H,EAAA,EAAD,CAAY8H,KAAK,QAAQ7H,MAAM,UAAU8H,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYtK,QAAQ,MAApB,QAGCT,GAAc,kBAACiH,EAAA,EAAD,CAAQlE,MAAM,UAAUC,QAzBrC,WAClBnE,GbDsB,SAACA,GAC3BA,EAASI,EAAe,YACxBU,IACKgG,MAAK,SAAAC,GAC0B,IAAxBA,EAAIhH,KAAKiH,YACThH,EAASoB,GAAgB,IACzBpB,EAASI,EAAe,eAExBN,EAAqBiH,EAAIhH,KAAMC,MAGtCkH,OAAM,SAAC5G,GACJD,EAAyBC,EAAON,WaaL,YAEP,YAAXuB,GAAwB,kBAAC4K,EAAA,EAAD,CAAgBjI,MAAM,eAEnD,kBAACkI,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,kBAAC,GAAD,CAAWpF,KAAMA,OACvD,kBAAC,KAAD,CAAOkF,OAAK,EAACC,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,GAAD,YAzBhD,yBACH9C,MAAO,CAACmC,SAAU,QAASY,IAAK,MAAOC,UAAW,SAAUC,MAAO,SACnE,kBAACC,GAAA,EAAD,Q,kBCvCNC,GAAcC,aAAgB,CAChCxG,MPoCwB,WAAgF,IAA/EvE,EAA8E,uDAAtDb,EAAc6L,EAAwC,uCACvG,OAAQA,EAAOzL,MACX,IAAK,YACD,IAAM0L,EAAS,eAAOjL,GAEtB,OADAiL,EAAUD,EAAOlI,YAAckI,EAAOzG,MAC/B0G,EAEX,IAAK,cACD,IAAIC,EAAgB,eAAIlL,GAAOgL,EAAOlI,YAEtC,OADA9C,EAAMgL,EAAOlI,YAAcoI,EAAcpF,QAAO,SAAAtC,GAAI,OAAIA,EAAKC,KAAOuH,EAAOvH,MACpE,eAAIzD,GAEf,IAAK,WACD,IAAMiL,EAAS,eAAOjL,GAChBmL,EAAUH,EAAOxH,KACjBe,EAAQ0G,EAAUE,EAAQrI,YAEhC,OADAmI,EAAUE,EAAQrI,YAAlB,CAAiCqI,GAAjC,mBAA6C5G,IACtC0G,EAEX,IAAK,cACD,IAAIC,EAAgBlL,EAAMgL,EAAOlI,YAC7BsI,EAAgBF,EAAc9E,KAAI,SAAA5C,GAAI,OAAIA,EAAKC,KAAOuH,EAAOjI,OAAnB,2BACvCS,GACAwH,EAAO3G,aACVb,KAEJ,OADAxD,EAAMgL,EAAOlI,YAAcsI,EACpB,eAAIpL,GAEf,IAAK,eACD,IAAMiL,EAAS,eAAOjL,GAEtB,OADAiL,EAAUD,EAAOzF,SAAS9B,IAAM,GACzBwH,EAEX,IAAK,kBACD,IAAMA,EAAS,eAAOjL,GAEtB,cADOiL,EAAUD,EAAOvH,IACjBwH,EAEX,IAAK,gBACD,IAAMA,EAAS,eAAOjL,GAItB,OAHAgL,EAAOxE,UAAU6E,SAAQ,SAAAvD,GACrBmD,EAAUnD,EAAGrE,IAAM,MAEhBwH,EAEX,QACI,OAAOjL,IOjFfwG,UJ4C2B,WAAsG,IAArGxG,EAAoG,uDAAjEb,GAAc6L,EAAmD,uCAChI,OAAQA,EAAOzL,MACX,IAAK,gBACD,OAAOyL,EAAOxE,UAAUJ,KAAI,SAAA0B,GAAE,kCACvBA,GADuB,IAE1BhC,OAAQ,MACRK,aAAc,iBAGtB,IAAK,kBACD,OAAOnG,EAAM8F,QAAO,SAAAgC,GAAE,OAAIA,EAAGrE,KAAOuH,EAAOvH,MAE/C,IAAK,eACD,MAAM,CAAN,2BAAYuH,EAAOzF,UAAnB,IAA6BO,OAAQ,MAAOK,aAAc,eAA1D,mBAA2EnG,IAE/E,IAAK,wBACD,OAAOA,EAAMoG,KAAI,SAAA0B,GAAE,OAAIA,EAAGrE,KAAOuH,EAAOvH,GAAjB,2BAA0BqE,GAA1B,IAA8BzG,MAAO2J,EAAO3J,QAASyG,KAEhF,IAAK,gCACD,OAAO9H,EAAMoG,KAAI,SAAA0B,GAAE,OAAIA,EAAGrE,KAAOuH,EAAOlI,WAAjB,2BAAkCgF,GAAlC,IAAsC3B,aAAc6E,EAAO7E,eAAgB2B,KAEtG,IAAK,yBACD,OAAO9H,EAAMoG,KAAI,SAAA0B,GAAE,OAAIA,EAAGrE,KAAOuH,EAAOvH,GAAjB,2BAA0BqE,GAA1B,IAA8BhC,OAAQkF,EAAOlF,SAAUgC,KAElF,QACI,OAAO9H,IIpEfC,IbcsB,WAAwG,IAAvGD,EAAsG,uDAAlEb,EAAc6L,EAAoD,uCAC7H,OAAQA,EAAOzL,MACX,IAAK,iBACD,OAAO,2BAAIS,GAAX,IAAkBR,OAAQwL,EAAOxL,SACrC,IAAK,gBACD,OAAO,2BAAIQ,GAAX,IAAkBzB,MAAOyM,EAAOzM,QAEpC,IAAK,yBACD,OAAO,2BAAIyB,GAAX,IAAkBP,cAAeuL,EAAOvL,gBAC5C,QACI,OAAOO,IavBfyG,KdFuB,WAA0G,IAAzGzG,EAAwG,uDAAnEb,EAAc6L,EAAqD,uCAChI,OAAQA,EAAOzL,MACX,IAAK,yBACD,OAAO,2BAAIS,GAAX,IAAkBZ,WAAY4L,EAAO1L,QACzC,QACI,OAAOU,McANsL,GAAQC,aAAYT,GAAaU,aAAgBC,OAM9D9N,OAAO2N,MAAQA,GCXfI,IAASjB,OACL,kBAAC,IAAD,CAAUa,MAAOA,IACb,kBAAC,GAAD,OAEJK,SAASC,eAAe,SlB8HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhH,MAAK,SAAAiH,GACJA,EAAaC,gBAEd9G,OAAM,SAAA5G,GACL2C,QAAQ3C,MAAMA,EAAMC,c","file":"static/js/main.40b7eab1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Dispatch } from 'redux';\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType, setAppErrorAC} from \"../state/app-reducer\";\r\nimport {ResponseType} from \"../api/todoLists-api\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import axios from 'axios'\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n     email: string\r\n     password: string\r\n     rememberMe: boolean\r\n     captcha?: string\r\n }\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<AuthResponseDataType>>(`auth/me`)\r\n    },\r\n    login(data: LoginParamsType) {\r\nreturn instance.post<ResponseType<{ userId?: number }>>( '/auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../state/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {authAPI, LoginParamsType} from '../../api/auth-api';\r\n\r\nconst initialState: InitialAuthReducerStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthReducerStateType = initialState, action: ActionsType): InitialAuthReducerStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\nexport type InitialAuthReducerStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n","import {setIsLoggedInAC} from \"../features/login/auth-reducer\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type RequestErrorType = null | string\r\n\r\n\r\nexport type InitialAppReducerStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // сюда будет записан текст ошибки - если произойдет какая-то глобальлная ошибка\r\n    error: RequestErrorType\r\n    //isInitialized === true когда приложение проиницилизировалось\r\n    isInitialized: boolean\r\n\r\n}\r\n\r\nconst initialState: InitialAppReducerStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialAppReducerStateType = initialState, action: ActionsType): InitialAppReducerStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR': {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type InitializedAppActionType = ReturnType<typeof setInitializeAppAC>\r\n\r\n\r\ntype ActionsType = SetAppStatusActionType | SetAppErrorActionType | InitializedAppActionType\r\n\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: \"APP/SET-STATUS\", status} as const\r\n}\r\n\r\nexport const setAppErrorAC = (error: RequestErrorType) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\n\r\nexport const setInitializeAppAC = (isInitialized: boolean) => {\r\n    return {type: 'APP/SET-IS-INITIALIZED', isInitialized} as const\r\n}\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n\r\n        }\r\n        dispatch(setInitializeAppAC(true))\r\n    })\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {RequestErrorType, setAppErrorAC} from \"../state/app-reducer\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, RequestErrorType>( state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateModelTaskType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1//todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todoListId: string) {\r\n        const promise =\r\n            instance.get<GetTasksResponseType>(`${todoListId}/tasks`)\r\n        return promise\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        const promise =\r\n            instance.post<ResponseType<{item: TaskType }>>(`${todoListId}/tasks`, {title})\r\n        return promise\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        const promise =\r\n            instance.delete<ResponseType>(`${todoListId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, modelTask: UpdateModelTaskType) {\r\n        const promise =\r\n            instance.put<ResponseType>(`${todolistId}/tasks/${taskId}`,  modelTask)\r\n        return promise\r\n    }\r\n} ","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemPropsType)  {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n       if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant='outlined'\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       disabled={disabled}\r\n            />\r\n            <IconButton color='primary' onClick={addItemHandler} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>)\r\n\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype  EditableSpanPropsType = {\r\n    title: string;\r\n    onChangeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    console.log('EditableSpan called')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    function activateEditMode() {\r\n        setEditMode(true);\r\n        setTitle(props.title)\r\n    }\r\n\r\n    function deactivateEditMode() {\r\n        setEditMode(false);\r\n        props.onChangeTitle(title)\r\n    }\r\n\r\n    function onChangeInputValue(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant='outlined'\r\n                     value={title}\r\n                     autoFocus\r\n                     onChange={onChangeInputValue}\r\n                     onBlur={deactivateEditMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {TaskStatuses, TaskType} from \"../../api/tasks-api\";\r\n\r\n\r\ntype PropsTaskType = {\r\n    task: TaskType,\r\n    removeTask: (id: string, todoListId: string) => void,\r\n    changeStatus: (id: string, status: TaskStatuses, todoListId: string) => void,\r\n    todoListId: string,\r\n    changeTaskTitle: (id: string, newTitle: string, todoListId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(function (props: PropsTaskType) {\r\n\r\n        console.log(\"Task called\")\r\n\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todoListId)\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newtTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newtTitle, props.todoListId)\r\n    }, [props])\r\n\r\n\r\n        return <div key={props.task.id}\r\n                    className={props.task.status === TaskStatuses.Completed? 'isDone' : ''}>\r\n            <Checkbox color={\"primary\"}\r\n                      checked={props.task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeStatusHandler}\r\n            />\r\n            <EditableSpan title={props.task.title} onChangeTitle={onChangeTitleHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    }\r\n)","import {TasksStateType} from \"../components/app/App\";\r\nimport {\r\n    AddTodoListActionType,\r\n    ChangeTodoListEntityStatusActionType,\r\n    RemoveTodoListActionType,\r\n    SetTodoListsActionType\r\n} from \"./todoList-reducer\";\r\nimport {tasksAPI, TaskType} from \"../api/tasks-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | UpdateTaskActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n    | SetTasksActionType\r\n    | ChangeTodoListEntityStatusActionType\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todoListId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    task: TaskType\r\n}\r\nexport type UpdateTaskActionType = {\r\n    type: 'UPDATE-TASK'\r\n    taskId: string\r\n    domainModel: UpdateDomainModelTaskType\r\n    todoListId: string\r\n}\r\n\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            let todoListTasks = {...state}[action.todoListId];\r\n            state[action.todoListId] = todoListTasks.filter(task => task.id !== action.id)\r\n            return {...state}\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            const newTask = action.task\r\n            const tasks = stateCopy[newTask.todoListId]\r\n            stateCopy[newTask.todoListId] = [newTask, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            let todoListTasks = state[action.todoListId];\r\n            let newTasksArray = todoListTasks.map(task => task.id === action.taskId ? {\r\n                ...task,\r\n                ...action.domainModel\r\n            } : task);\r\n            state[action.todoListId] = newTasksArray\r\n            return {...state}\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoList.id] = []\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id];\r\n            return stateCopy\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state};\r\n            action.todoLists.forEach(tl => {\r\n                stateCopy[tl.id] = [];\r\n            })\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todoListId: string\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todoListId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todoListId}\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string): RemoveTaskActionType => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        id: taskId,\r\n        todoListId: todoListId\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\n\r\nexport const updateTaskAC = (taskId: string, domainModel: UpdateDomainModelTaskType, todoListId: string): UpdateTaskActionType => {\r\n    return {\r\n        type: 'UPDATE-TASK', taskId, domainModel, todoListId\r\n    }\r\n}\r\n\r\n// Thunk\r\n\r\nexport const fetchTasksTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatch>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        tasksAPI.getTasks(todoListId)\r\n            .then((res) => {\r\n                dispatch(setTasksAC(res.data.items, todoListId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTasksTC = (taskId: string, todoListId: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatch>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        tasksAPI.deleteTask(todoListId, taskId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC(taskId, todoListId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const addTaskTC = (todoListId: string, title: string) => (dispatch: Dispatch<ThunkDispatch>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.createTask(todoListId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\ntype UpdateDomainModelTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainModelTaskType, todoListId: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatch>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.log('task is not found in the state')\r\n            return\r\n        }\r\n        const apiModel = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        tasksAPI.updateTask(todoListId, taskId, apiModel).then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC(taskId, domainModel, todoListId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\ntype ThunkDispatch = ActionsType | SetAppStatusActionType | SetAppErrorActionType\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../common/AddItemsForm\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"../task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../api/tasks-api\";\r\nimport {FilterValuesType, TodoListDomainType} from \"../../state/todoList-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../../state/tasks-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    todoList: TodoListDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (todoListId: string, title: string) => void\r\n    changeStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n        console.log(\"Todolist called\")\r\n\r\n\r\n        const addTask = useCallback((title: string) => {\r\n            props.addTask(props.todoList.id, title);\r\n        }, [props])\r\n\r\n        const onAllClickHandler = useCallback(() => {\r\n            props.changeFilter('all', props.todoList.id)\r\n        }, [props]);\r\n\r\n        const onActiveClickHandler = useCallback(() => {\r\n            props.changeFilter('active', props.todoList.id)\r\n        }, [props]);\r\n\r\n        const onCompletedClickHandler = useCallback(() => {\r\n            props.changeFilter('completed', props.todoList.id)\r\n        }, [props]);\r\n\r\n\r\n        const removeTodoList = () => {\r\n            props.removeTodoList(props.todoList.id)\r\n        }\r\n\r\n        const changeTodoListTitle = useCallback((newtTitle: string) => {\r\n            props.changeTodoListTitle(newtTitle, props.todoList.id)\r\n        }, [props]);\r\n\r\n        let tasksForTodoList = props.tasks;\r\n\r\n        if (props.todoList.filter === 'active') {\r\n            tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n        }\r\n        if (props.todoList.filter === 'completed') {\r\n            tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n        }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todoList.id))\r\n    }, [ demo, dispatch, props.todoList.id])\r\n\r\n        return <div>\r\n            <div className={'todoListTitle'}>\r\n                <h3><EditableSpan title={props.todoList.title} onChangeTitle={changeTodoListTitle}/></h3>\r\n                <IconButton onClick={removeTodoList} disabled={props.todoList.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n            <AddItemForm addItem={addTask} disabled={props.todoList.entityStatus === 'loading'}/>\r\n            <div>\r\n                {tasksForTodoList.map(task => <Task\r\n                    key={task.id}\r\n                    task={task} removeTask={props.removeTask}\r\n                    changeStatus={props.changeStatus} todoListId={props.todoList.id}\r\n                    changeTaskTitle={props.changeTaskTitle}/>)}\r\n            </div>\r\n            <div>\r\n                <Button variant={props.todoList.filter === 'all' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color='default'\r\n                >All\r\n                </Button>\r\n                <Button variant={props.todoList.filter === 'active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n                        color='primary'\r\n                >Active\r\n                </Button>\r\n                <Button variant={props.todoList.filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}\r\n                        color='secondary'\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n)","import axios from 'axios'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n\r\nexport const todoListsApi = {\r\n    updateTodoList(todoListId: string, title: string) {\r\n        const promise =\r\n            instance.put<ResponseType>(`todo-lists/${todoListId}`, {title: title})\r\n        return promise\r\n    },\r\n    getTodoLists() {\r\n        const promise =\r\n            instance.get<Array<TodoListType>>('/todo-lists')\r\n        return promise\r\n    },\r\n    createTodoList(title: string) {\r\n        const promise =\r\n            instance.post<ResponseType<{item: TodoListType }>>('todo-lists', {title: title})\r\n        return promise\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        const promise =\r\n            instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n        return promise\r\n    }\r\n}","import {todoListsApi, TodoListType} from \"../api/todoLists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\ntype ActionsType = RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n    | SetTodoListsActionType\r\n    | ChangeTodoListEntityStatusActionType\r\n\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\n\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    todoList: TodoListType\r\n\r\n}\r\n\r\nexport type ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type ChangeTodoListEntityStatusActionType = {\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS'\r\n    todoListId: string\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodoListDomainType> = [];\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport const todoListReducer = (state: Array<TodoListDomainType> = initialState, action: ActionsType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            return action.todoLists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: 'succeeded'\r\n            }))\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{...action.todoList, filter: 'all', entityStatus: 'succeeded'}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type SetTodoListsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todoLists: Array<TodoListType>\r\n}\r\n\r\nexport const setTodoListsAC = (todoLists: Array<TodoListType>): SetTodoListsActionType => {\r\n    return {type: 'SET-TODOLISTS', todoLists}\r\n}\r\n\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListActionType => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id: todoListId\r\n    }\r\n}\r\n\r\nexport const addTodoListAC = (todoList: TodoListType): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', todoList}\r\n}\r\n\r\nexport const changeTodoListTitleAC = (newTitle: string, todoListId: string): ChangeTodoListTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        title: newTitle,\r\n        id: todoListId\r\n    }\r\n}\r\n\r\nexport const changeTodoListFilterAC = (newFilter: FilterValuesType, todoListId: string): ChangeTodoListFilterActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        filter: newFilter,\r\n        id: todoListId\r\n    }\r\n}\r\n\r\nexport const changeTodoListEntityStatusAC = (todoListId: string, entityStatus: RequestStatusType): ChangeTodoListEntityStatusActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n        todoListId,\r\n        entityStatus\r\n    }\r\n}\r\n\r\n\r\n// Thunk\r\n\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: Dispatch<ThunkDispatch>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todoListsApi.getTodoLists()\r\n            .then((res) => {\r\n                dispatch(setTodoListsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatch>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(changeTodoListEntityStatusAC(todoListId, \"loading\"))\r\n        todoListsApi.deleteTodoList(todoListId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodoListAC(todoListId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleTC = (newTitle: string, todoListId: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatch>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todoListsApi.updateTodoList(todoListId, newTitle)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodoListTitleAC(newTitle, todoListId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatch>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todoListsApi.createTodoList(title)\r\n            .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(addTodoListAC(res.data.data.item))\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                }\r\n            )\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\ntype ThunkDispatch = ActionsType | SetAppStatusActionType | SetAppErrorActionType","import Grid from \"@material-ui/core/Grid\";\r\nimport {AddItemForm} from \"../../common/AddItemsForm\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {TodoList} from \"../todoList/TodoList\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {\r\n    addTodoListTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    TodoListDomainType\r\n} from \"../../state/todoList-reducer\";\r\nimport {addTaskTC, removeTasksTC, updateTaskTC} from \"../../state/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/tasks-api\";\r\nimport {TasksStateType} from \"../app/AppWithRedux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoLists: React.FC<PropsType> = ({demo=false}) => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todoListId: string) {\r\n        dispatch(removeTasksTC(id, todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (todoListId: string, title: string) {\r\n        dispatch(addTaskTC(todoListId, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todoListId: string) {\r\n        dispatch(updateTaskTC(id, {status}, todoListId))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todoListId: string) {\r\n        dispatch(changeTodoListFilterAC(value, todoListId))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback(function (id: string) {\r\n        dispatch(removeTodoListTC(id))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback(function (title: string) {\r\n        dispatch(addTodoListTC(title));\r\n    }, [dispatch])\r\n\r\n    const changeTitle = useCallback(function (id: string, newTitle: string, todoListId: string) {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback(function (newTitle: string, todoListId: string) {\r\n        dispatch(changeTodoListTitleTC(newTitle, todoListId))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [demo, dispatch, isLoggedIn])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n\r\n        <Grid container spacing={3}>{\r\n            todoLists.map(tl => {\r\n\r\n                    let tasksForTodoList = tasks[tl.id];\r\n\r\n                    return <Grid key={tl.id} item>\r\n                        <Paper style={{padding: \"10px\", backgroundColor: '#cfe8fc'}}>\r\n                            <TodoList\r\n                                todoList={tl}\r\n                                tasks={tasksForTodoList}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeStatus={changeStatus}\r\n                                removeTodoList={removeTodoList}\r\n                                changeTaskTitle={changeTitle}\r\n                                changeTodoListTitle={changeTodoListTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                }\r\n            )}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    type FormErrorType = {\r\n        email: string\r\n        password: string\r\n        rememberMe: boolean\r\n        captcha?: string\r\n    }\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch()\r\n\r\n    const validate = (values: FormErrorType) => {\r\n        const errors: any = {};\r\n        if (!values.email) {\r\n            errors.email = 'Email is required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Password is required';\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target='_blank' rel=\"noopener noreferrer\">here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {TaskType} from \"../../api/tasks-api\";\r\nimport {ErrorSnackbar} from \"../../common/Allert\";\r\nimport {TodoLists} from \"../todoLists/TodoLists\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"../../state/app-reducer\";\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport {Login} from \"../../features/login/Login\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { logoutTC } from '../../features/login/auth-reducer';\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const AppWithRedux = ({demo = false}: PropsType) => {\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    })\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress color='secondary'/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodoLists demo={demo}/>}/>\r\n                    <Route exact path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport { tasksReducer } from \"./tasks-reducer\";\r\nimport {todoListReducer} from \"./todoList-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker'\nimport AppWithRedux from \"./components/app/AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from './state/store';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}