{"version":3,"sources":["serviceWorker.ts","utils/error-utils.ts","api/instance.ts","api/auth-api.ts","features/login/auth-reducer.ts","components/app/app-reducer.ts","common/Allert.tsx","api/types.ts","common/AddItemsForm.tsx","common/EditableSpan.tsx","components/task/selectors.ts","api/tasks-api.ts","components/todoLists/selectors.ts","api/todoLists-api.ts","components/todoLists/todoList-reducer.ts","components/todoLists/index.tsx","components/app/selectors.ts","components/app/index.tsx","components/task/tasks-reducer.ts","components/task/index.tsx","utils/redux-utils.ts","components/task/Task.tsx","components/todoList/TodoList.tsx","features/login/selectors.ts","features/login/Login.tsx","features/login/index.tsx","components/todoLists/TodoLists.tsx","components/app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","handleServerAppError","data","thunkAPI","messages","length","dispatch","setAppError","error","setAppStatus","status","handleServerNetworkError","message","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","post","delete","login","createAsyncThunk","param","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logout","asyncActions","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","setIsLoggedIn","actions","initializeApp","isInitialized","appReducer","Alert","props","elevation","variant","ErrorSnackbar","useSelector","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","console","log","useState","title","setTitle","setError","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","style","marginLeft","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onChangeTitle","onDoubleClick","selectTasks","tasks","tasksAPI","todoListId","taskId","todolistId","modelTask","put","selectTodoList","todoLists","todoListsApi","fetchTodoListsTC","removeTodoListTC","changeTodoListEntityStatus","entityStatus","changeTodoListTitleTC","params","newTitle","addTodoListTC","todoList","item","changeTodoListFilter","index","findIndex","tl","id","filter","newFilter","map","splice","unshift","todoListReducer","todoListsActions","todoListsAsyncActions","selectStatus","selectIsInitialized","appActions","appAsyncActions","fetchTasks","items","removeTask","changeTaskEntityStatusAC","entityTaskStatus","addTask","updateTask","getState","task","find","t","apiModel","startDate","priority","description","deadline","domainModel","forEach","tasksReducer","tasksActions","tasksAsyncActions","useAppDispatch","useActions","useMemo","bindActionCreators","Task","onChangeTitleHandler","useCallback","newtTitle","key","className","Completed","position","display","alignItems","Checkbox","checked","newIsDoneValue","New","right","Delete","TodoList","demo","addTaskCallback","thunk","resultAction","rejected","Error","onFilterButtonClickHandler","buttonFilter","changeTodoListTitle","tasksForTodoList","useEffect","renderFilterButton","text","Button","top","padding","selectIsLoggedIn","auth","Login","authSelectors","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","formikHelpers","authActions","setFieldError","field","to","Grid","container","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","authAsyncActions","TodoLists","todoListsSelectors","tasksSelectors","addTodoListCallback","spacing","flexWrap","overflowX","Paper","backgroundColor","width","AppWithRedux","appSelectors","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e1b37045.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {setAppError, setAppStatus} from \"../components/app/app-reducer\";\r\nimport {ResponseType} from \"../api/types\";\r\nimport {AxiosError} from \"axios\";\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, thunkAPI: ThunkAPIType,\r\n                                        showError = true) => {\r\n    if (data.messages.length) {\r\n        thunkAPI.dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        thunkAPI.dispatch(setAppError({error:'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: AxiosError,\r\n                                         thunkAPI: ThunkAPIType,\r\n                                         showError = true) => {\r\n    thunkAPI.dispatch(setAppError(error.message ? {error: error.message} : {error:'Some error occurred'}))\r\n    thunkAPI.dispatch(setAppStatus({status:'failed'}))\r\n}\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n","import {AuthResponseDataType, LoginParamsType, ResponseType} from \"./types\";\r\nimport {instance} from \"./instance\";\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<AuthResponseDataType>>(`auth/me`)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('/auth/login', data)\r\n    },\r\n    logout() {\r\n        debugger\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n","import {setAppStatus} from \"../../components/app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {authAPI} from '../../api/auth-api';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {FieldErrorType, LoginParamsType} from \"../../api/types\";\r\n\r\nexport type InitialAuthReducerStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n\r\n    }\r\n})\r\n\r\n// типизацию logoutTC можно не делать так как этой санкой мы не пользуемся снаружи\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true;\r\n            }\r\n        )\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false;\r\n            }\r\n        )\r\n    }\r\n})\r\n\r\n\r\nexport const authReducer = slice.reducer;\r\n\r\nexport const setIsLoggedIn = slice.actions.setIsLoggedInAC\r\n","import {setIsLoggedIn} from \"../../features/login/auth-reducer\";\r\nimport {authAPI} from \"../../api/auth-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type RequestErrorType = null | string\r\n\r\n\r\nexport type InitialAppReducerStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // сюда будет записан текст ошибки - если произойдет какая-то глобальлная ошибка\r\n    error: RequestErrorType\r\n    //isInitialized === true когда приложение проиницилизировалось\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const initializeApp = createAsyncThunk('auth/app', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({value: true}));\r\n        }\r\n})\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialAppReducerStateType,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{ error: RequestErrorType }>) {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n    extraReducers: (builder => {\r\n        builder.addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    })\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\n\r\nexport const appReducer = slice.reducer;\r\n\r\nexport const {setAppStatus, setAppError} = slice.actions\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {RequestErrorType, setAppError} from \"../components/app/app-reducer\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, RequestErrorType>( state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n\r\n        }\r\n        dispatch(setAppError({error:null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n\r\n\r\n","\r\nexport type AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateModelTaskType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemPropsType = {\r\n    addItem: (title: string) => Promise<any>\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async  () => {\r\n        if (title.trim() !== '') {\r\n            try {\r\n              await addItem(title);\r\n                setTitle('')\r\n            } catch (error) {\r\n                setError(error)\r\n            }\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant='outlined'\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       disabled={disabled}\r\n            />\r\n            <IconButton color='primary' onClick={addItemHandler} disabled={disabled} style={{marginLeft: '10px'}}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>)\r\n\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype  EditableSpanPropsType = {\r\n    title: string;\r\n    onChangeTitle: (newTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    console.log('EditableSpan called')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    function activateEditMode() {\r\n        props.disabled ? setEditMode(false)\r\n        :setEditMode(true);\r\n        setTitle(props.title)\r\n    }\r\n\r\n    function deactivateEditMode() {\r\n        setEditMode(false);\r\n        props.onChangeTitle(title)\r\n    }\r\n\r\n    function onChangeInputValue(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant='outlined'\r\n                     value={title}\r\n                     autoFocus\r\n                     onChange={onChangeInputValue}\r\n                     onBlur={deactivateEditMode}/>\r\n        : <span onDoubleClick={activateEditMode} >{props.title}</span>\r\n\r\n})\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectTasks = (state: AppRootStateType) => state.tasks;\r\n","import {GetTasksResponseType, ResponseType, TaskType, UpdateModelTaskType} from \"./types\";\r\nimport {instance} from \"./instance\";\r\n\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todoListId: string) {\r\n        return instance.get<GetTasksResponseType>(`${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`${todoListId}/tasks`, {title})\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`${todoListId}/tasks/${taskId}`)\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, modelTask: UpdateModelTaskType) {\r\n        return instance.put<ResponseType>(`${todolistId}/tasks/${taskId}`, modelTask)\r\n    }\r\n}\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectTodoList = (state: AppRootStateType) => state.todoLists;\r\n","import {ResponseType, TodoListType} from \"./types\";\r\nimport {instance} from \"./instance\";\r\n\r\n\r\nexport const todoListsApi = {\r\n    updateTodoList(todoListId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todoListId}`, {title: title})\r\n    },\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListType>>('/todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n    }\r\n}\r\n","import {todoListsApi} from \"../../api/todoLists-api\";\r\nimport {RequestStatusType, setAppStatus} from \"../app/app-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {TodoListType} from \"../../api/types\";\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n const fetchTodoListsTC = createAsyncThunk('todoLists/fetchTodoLists', async (param, thunkAPI) => {\r\n     thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\r\n    try {\r\n        const res = await todoListsApi.getTodoLists();\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n        return {todoLists: res.data}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n const removeTodoListTC = createAsyncThunk('todoLists/removeTodoList', async (todoListId: string, thunkAPI) => {\r\n     thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n     thunkAPI.dispatch(changeTodoListEntityStatus({todoListId: todoListId, entityStatus: 'loading'}))\r\n    try {\r\n        const res = await todoListsApi.deleteTodoList(todoListId);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todoListId: todoListId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\n const changeTodoListTitleTC = createAsyncThunk('todoLists/changeTodoListTitle', async (params: { newTitle: string, todoListId: string }, thunkAPI) => {\r\n     thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await todoListsApi.updateTodoList(params.todoListId, params.newTitle);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {newTitle: params.newTitle, todoListId: params.todoListId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\n const addTodoListTC = createAsyncThunk('todoLists/addTodoList', async (title: string, thunkAPI ) => {\r\n     thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await todoListsApi.createTodoList(title);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todoList: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodoListsTC,\r\n    removeTodoListTC,\r\n    changeTodoListTitleTC,\r\n    addTodoListTC\r\n}\r\n\r\nexport  const slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: [] as Array<TodoListDomainType>,\r\n    reducers: {\r\n        changeTodoListFilter(state, action: PayloadAction<{ newFilter: FilterValuesType, todoListId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].filter = action.payload.newFilter;\r\n        },\r\n        changeTodoListEntityStatus(state, action: PayloadAction<{ todoListId: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].entityStatus = action.payload.entityStatus;\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\r\n            return action.payload.todoLists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: 'idle'\r\n            }))\r\n        })\r\n        builder.addCase(removeTodoListTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(changeTodoListTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].title = action.payload.newTitle;\r\n        })\r\n        builder.addCase(addTodoListTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n    }\r\n})\r\n\r\nexport const {changeTodoListFilter, changeTodoListEntityStatus} = slice.actions\r\n\r\nexport const todoListReducer = slice.reducer\r\n\r\n\r\n\r\n","import * as todoListsSelectors from './selectors'\r\nimport {asyncActions as todoListsAsyncActions, slice} from \"./todoList-reducer\";\r\n\r\n\r\n\r\nconst todoListsActions = {\r\n    ...todoListsAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    todoListsActions,\r\n    todoListsSelectors,\r\n\r\n}\r\n\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status;\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized;\r\n","import * as appSelectors from './selectors'\r\nimport {asyncActions as appAsyncActions, slice} from \"./app-reducer\";\r\n\r\n\r\nconst appActions = {\r\n    ...appAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\n\r\nexport {\r\n    appSelectors,\r\n    appActions\r\n}\r\n","import {tasksAPI} from \"../../api/tasks-api\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType, setAppStatus} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {todoListsActions} from '../todoLists/'\r\nimport {TaskType} from \"../../api/types\";\r\nimport {ThunkError} from \"../../utils/types\";\r\nimport {appActions} from \"../app\";\r\n\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityTaskStatus: RequestStatusType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\n\r\nconst fetchTasks = createAsyncThunk('tasks/fetchTasks', async (todoListId: string, thunkAPI) => {\r\n    debugger\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\r\n    try {\r\n        const res = await tasksAPI.getTasks(todoListId);\r\n        const tasks = res.data.items;\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n        return {tasks, todoListId}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n\r\n\r\nconst removeTask = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todoListId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\r\n    thunkAPI.dispatch(changeTaskEntityStatusAC({\r\n        todoListId: param.todoListId,\r\n        taskId: param.taskId,\r\n        entityTaskStatus: \"loading\"\r\n    }))\r\n    try {\r\n        const res = await tasksAPI.deleteTask(param.todoListId, param.taskId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {taskId: param.taskId, todoListId: param.todoListId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch\r\n        (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n\r\nconst addTask = createAsyncThunk<TaskType, { title: string, todoListId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI): Promise<any> => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.createTask(param.todoListId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return  res.data.data.item\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    }\r\n)\r\n\r\nconst updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainModelTaskType, todoListId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todoListId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        console.log('task is not found in the state')\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n    const apiModel = {\r\n        title: task.title,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n    try {\r\n        const res = await tasksAPI.updateTask(param.todoListId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {taskId: param.taskId, domainModel: param.domainModel, todoListId: param.todoListId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch\r\n        (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ todoListId: string, taskId: string, entityTaskStatus: RequestStatusType }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], entityTaskStatus: action.payload.entityTaskStatus}\r\n            }\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(todoListsActions.addTodoListTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoList.id] = []\r\n        })\r\n        builder.addCase(todoListsActions.removeTodoListTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.todoListId];\r\n        })\r\n        builder.addCase(todoListsActions.fetchTodoListsTC.fulfilled, (state, action) => {\r\n                action.payload.todoLists.forEach(tl => {\r\n                    state[tl.id] = [];\r\n                })\r\n            }\r\n        )\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId] = action.payload.tasks.map((t: any) => ({...t, entityTaskStatus: 'idle'}))\r\n            }\r\n        )\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n                const index = state[action.payload.todoListId].findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    state[action.payload.todoListId].splice(index, 1)\r\n                }\r\n            }\r\n        )\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift({...action.payload, entityTaskStatus: 'idle'})\r\n            }\r\n        )\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n                }\r\n\r\n            }\r\n        )\r\n\r\n    }\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {changeTaskEntityStatusAC} = slice.actions\r\n\r\n\r\ntype UpdateDomainModelTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import * as tasksSelectors from './selectors'\r\nimport {asyncActions as tasksAsyncActions, slice} from './tasks-reducer'\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    tasksActions,\r\n    tasksSelectors\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"./types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [actions, dispatch])\r\n}\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {TaskDomainType} from \"./tasks-reducer\";\r\nimport {tasksActions} from \"./index\";\r\nimport {useActions} from \"../../utils/redux-utils\";\r\nimport {TaskStatuses} from \"../../api/types\";\r\n\r\n\r\ntype PropsTaskType = {\r\n    task: TaskDomainType,\r\n    todoListId: string,\r\n}\r\n\r\nexport const Task = React.memo(function (props: PropsTaskType) {\r\n\r\n        const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n        const onClickHandler = () => removeTask({taskId: props.task.id, todoListId: props.todoListId})\r\n\r\n        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            updateTask({taskId: props.task.id,\r\n            domainModel: {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todoListId: props.todoListId})\r\n        }\r\n\r\n        const onChangeTitleHandler = useCallback((newtTitle: string) => {\r\n            updateTask({taskId: props.task.id,\r\n                domainModel: {title: newtTitle},\r\n                todoListId: props.todoListId})\r\n        }, [updateTask, props.task.id, props.todoListId])\r\n\r\n        const disabled = props.task.entityTaskStatus === 'loading'\r\n\r\n\r\n        return <div key={props.task.id}\r\n                    className={props.task.status === TaskStatuses.Completed ? 'isDone' : ''}\r\n                    style={{position: 'relative', display: 'flex', alignItems: 'center'}}>\r\n            <Checkbox color={\"primary\"}\r\n                      checked={props.task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeStatusHandler} disabled={disabled}\r\n            />\r\n            <EditableSpan title={props.task.title}\r\n                          onChangeTitle={onChangeTitleHandler}\r\n                          disabled={disabled}\r\n                          />\r\n            <IconButton onClick={onClickHandler} disabled={disabled} style={{position: 'absolute', right: '5px'}}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    }\r\n)\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../common/AddItemsForm\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {Button, IconButton, PropTypes} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"../task/Task\";\r\nimport {FilterValuesType, TodoListDomainType} from \"../todoLists/todoList-reducer\";\r\nimport {TaskDomainType} from \"../task/tasks-reducer\";\r\nimport {tasksActions} from \"../task\";\r\nimport {todoListsActions} from \"../todoLists\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {TaskStatuses} from \"../../api/types\";\r\n\r\n\r\ntype PropsType = {\r\n    todoList: TodoListDomainType\r\n    tasks: Array<TaskDomainType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n        const {fetchTasks} = useActions(tasksActions)\r\n        const {changeTodoListFilter, removeTodoListTC, changeTodoListTitleTC} = useActions(todoListsActions)\r\n\r\n        const dispatch = useAppDispatch()\r\n\r\n        const addTaskCallback = useCallback(async (title: string) => {\r\n            let thunk = tasksActions.addTask({title: title, todoListId: props.todoList.id,});\r\n\r\n            const resultAction = await dispatch(thunk);\r\n            if (tasksActions.addTask.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload.fieldsErrors[0]\r\n                    throw new Error(error.error)\r\n                } else {\r\n                    throw new Error('Some error occurred')\r\n                }\r\n            }\r\n        }, [dispatch, props.todoList.id])\r\n\r\n        const onFilterButtonClickHandler = useCallback((buttonFilter: FilterValuesType) => {\r\n            changeTodoListFilter({newFilter: buttonFilter, todoListId: props.todoList.id})\r\n        }, [changeTodoListFilter, props.todoList.id]);\r\n\r\n        const removeTodoList = () => {\r\n            removeTodoListTC(props.todoList.id)\r\n        }\r\n\r\n        const changeTodoListTitle = useCallback((newtTitle: string) => {\r\n            changeTodoListTitleTC({newTitle: newtTitle, todoListId: props.todoList.id})\r\n        }, [changeTodoListTitleTC, props.todoList.id]);\r\n\r\n        let tasksForTodoList = props.tasks;\r\n\r\n        if (props.todoList.filter === 'active') {\r\n            tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n        }\r\n        if (props.todoList.filter === 'completed') {\r\n            tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n        }\r\n\r\n\r\n        useEffect(() => {\r\n            if (demo) {\r\n                return\r\n            }\r\n            fetchTasks(props.todoList.id)\r\n        }, [demo, fetchTasks, props.todoList.id])\r\n\r\n\r\n        const renderFilterButton = (\r\n            buttonFilter: FilterValuesType,\r\n            color: PropTypes.Color,\r\n            text: string) => {\r\n            return <Button variant={props.todoList.filter === buttonFilter ? 'outlined' : 'text'}\r\n                           onClick={() => {\r\n                               onFilterButtonClickHandler(buttonFilter);\r\n                           }}\r\n                           color={color}>\r\n                {text}\r\n            </Button>\r\n        }\r\n\r\n        return <div style={{position: 'relative'}}>\r\n            <div className={'todoListTitle'}>\r\n                <IconButton style={{position: 'absolute', right: '5px', top: '7px'}} onClick={removeTodoList}\r\n                            disabled={props.todoList.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                <h3><EditableSpan title={props.todoList.title} onChangeTitle={changeTodoListTitle}/></h3>\r\n\r\n            </div>\r\n            <AddItemForm addItem={addTaskCallback} disabled={props.todoList.entityStatus === 'loading'}/>\r\n            <div>\r\n\r\n                {!tasksForTodoList.length && <div style={{padding: '10px', color: 'gray'}}>No tasks</div>}\r\n                {tasksForTodoList.map(task => <Task\r\n                    key={task.id}\r\n                    task={task}\r\n                    todoListId={props.todoList.id}/>)}\r\n            </div>\r\n            <div>\r\n                {renderFilterButton(\"all\", \"default\", 'All')}\r\n                {renderFilterButton(\"active\", \"primary\", 'Active')}\r\n                {renderFilterButton(\"completed\", \"secondary\", 'Completed')}\r\n            </div>\r\n        </div>\r\n    }\r\n)\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {login} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {authActions, authSelectors} from \"./index\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n\r\n    type FormErrorType = {\r\n        email: string\r\n        password: string\r\n        rememberMe: boolean\r\n        captcha?: string\r\n    }\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(authSelectors.selectIsLoggedIn);\r\n    const dispatch = useAppDispatch()\r\n\r\n    const validate = (values: FormErrorType) => {\r\n        const errors: any = {};\r\n        if (!values.email) {\r\n            errors.email = 'Email is required';\r\n        }\r\n        /* else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n             errors.email = 'Invalid email address';\r\n         }*/\r\n        if (!values.password) {\r\n            errors.password = 'Password is required';\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(authActions.login(values));\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target='_blank' rel=\"noopener noreferrer\">here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport { Login } from './Login'\r\nimport {asyncActions as authAsyncActions, slice} from  './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    authSelectors,\r\n    authActions,\r\n    Login\r\n}\r\n\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport {AddItemForm} from \"../../common/AddItemsForm\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {TodoList} from \"../todoList/TodoList\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {authSelectors} from \"../../features/login\";\r\nimport {todoListsActions, todoListsSelectors} from \"./index\";\r\nimport {tasksSelectors} from \"../task\";\r\n\r\nimport {useActions} from \"../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoLists: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n\r\n    const todoLists = useSelector(todoListsSelectors.selectTodoList);\r\n    const tasks = useSelector(tasksSelectors.selectTasks);\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const {addTodoListTC, fetchTodoListsTC} = useActions(todoListsActions)\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodoListsTC()\r\n    }, [demo, fetchTodoListsTC, isLoggedIn])\r\n\r\n    const addTodoListCallback = useCallback(async  (title: string) => {\r\n        addTodoListTC(title);\r\n    }, [addTodoListTC])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodoListCallback}/>\r\n        </Grid>\r\n\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap',  overflowX: 'scroll'}}>{\r\n            todoLists.map(tl => {\r\n\r\n                    let tasksForTodoList = tasks[tl.id];\r\n\r\n                    return <Grid key={tl.id} item>\r\n                        <Paper style={{padding: \"10px\", backgroundColor: '#cfe8fc', width: '300px'}}>\r\n                            <TodoList\r\n                                todoList={tl}\r\n                                tasks={tasksForTodoList}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                }\r\n            )}\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {ErrorSnackbar} from \"../../common/Allert\";\r\nimport {TodoLists} from \"../todoLists/TodoLists\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Route} from 'react-router-dom';\r\nimport {authActions, authSelectors, Login} from \"../../features/login\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {TaskDomainType} from \"../task/tasks-reducer\";\r\nimport {appActions, appSelectors} from '.';\r\nimport {useActions} from \"../../utils/redux-utils\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const AppWithRedux = ({demo = false}: PropsType) => {\r\n\r\n\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const status = useSelector(appSelectors.selectStatus)\r\n    const {initializeApp} = useActions(appActions)\r\n    const {logout} = useActions(authActions)\r\n\r\n\r\n    const isInitialized = useSelector(appSelectors.selectIsInitialized)\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    })\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logout}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color='secondary'/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodoLists demo={demo}/>}/>\r\n                <Route exact path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../components/task/tasks-reducer\";\r\nimport {todoListReducer} from \"../components/todoLists/todoList-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../components/app/app-reducer\";\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {RootReducerType} from \"../utils/types\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware =>\r\n        getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker'\r\nimport AppWithRedux from \"./components/app/AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <AppWithRedux/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}