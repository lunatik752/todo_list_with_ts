{"version":3,"sources":["serviceWorker.ts","utils/error-utils.ts","api/auth-api.ts","features/login/auth-reducer.ts","state/app-reducer.ts","common/Allert.tsx","api/tasks-api.ts","common/AddItemsForm.tsx","common/EditableSpan.tsx","components/task/Task.tsx","api/todoLists-api.ts","state/todoList-reducer.ts","state/tasks-reducer.ts","components/todoList/TodoList.tsx","components/todoLists/TodoLists.tsx","features/login/Login.tsx","components/app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","post","delete","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setInitializeAppAC","appReducer","Alert","props","elevation","variant","ErrorSnackbar","useSelector","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","console","log","useState","title","setTitle","setError","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onChangeTitle","onDoubleClick","tasksAPI","todoListId","taskId","todolistId","modelTask","put","Task","onChangeTitleHandler","useCallback","newtTitle","changeTaskTitle","task","id","entityTaskStatus","key","className","Completed","Checkbox","checked","newIsDoneValue","changeStatus","New","removeTask","Delete","todoListsApi","setTodoListsAC","todoLists","map","tl","filter","entityStatus","removeTodoListAC","index","findIndex","splice","addTodoListAC","unshift","todoList","changeTodoListTitleAC","newTitle","changeTodoListFilterAC","newFilter","changeTodoListEntityStatusAC","todoListReducer","setTasksAC","tasks","t","removeTaskAC","addTaskAC","updateTaskAC","domainModel","changeTaskEntityStatusAC","extraReducers","bilder","addCase","forEach","tasksReducer","updateTaskTC","getState","find","apiModel","startDate","priority","description","deadline","then","res","resultCode","catch","TodoList","demo","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodoListTitle","tasksForTodoList","useEffect","items","removeTodoList","Button","TodoLists","auth","removeTasksTC","item","addTaskTC","addTodoList","addTodoListTC","changeTitle","changeTodoListTitleTC","Grid","container","style","padding","spacing","Paper","backgroundColor","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","AppWithRedux","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bae2ca3f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Dispatch} from 'redux';\r\nimport {setAppErrorAC, setAppStatusAC} from \"../state/app-reducer\";\r\nimport {ResponseType} from \"../api/todoLists-api\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC(error.message ? {error: error.message} : {error:'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n     email: string\r\n     password: string\r\n     rememberMe: boolean\r\n     captcha?: string\r\n }\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<AuthResponseDataType>>(`auth/me`)\r\n    },\r\n    login(data: LoginParamsType) {\r\nreturn instance.post<ResponseType<{ userId?: number }>>( '/auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from \"../../state/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {authAPI, LoginParamsType} from '../../api/auth-api';\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type InitialAuthReducerStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const authReducer = slice.reducer;\r\n\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}));\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}));\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import {setIsLoggedInAC} from \"../features/login/auth-reducer\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type RequestErrorType = null | string\r\n\r\n\r\nexport type InitialAppReducerStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // сюда будет записан текст ошибки - если произойдет какая-то глобальлная ошибка\r\n    error: RequestErrorType\r\n    //isInitialized === true когда приложение проиницилизировалось\r\n    isInitialized: boolean\r\n\r\n}\r\n\r\nconst initialState: InitialAppReducerStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: RequestErrorType }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setInitializeAppAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const appReducer = slice.reducer;\r\n\r\n\r\n\r\nexport const {setAppStatusAC, setAppErrorAC, setInitializeAppAC} = slice.actions\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n\r\n        }\r\n        dispatch(setInitializeAppAC({isInitialized: true}))\r\n    })\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {RequestErrorType, setAppErrorAC} from \"../state/app-reducer\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, RequestErrorType>( state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n\r\n        }\r\n        dispatch(setAppErrorAC({error:null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateModelTaskType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1//todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todoListId: string) {\r\n        const promise =\r\n            instance.get<GetTasksResponseType>(`${todoListId}/tasks`)\r\n        return promise\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        const promise =\r\n            instance.post<ResponseType<{item: TaskType }>>(`${todoListId}/tasks`, {title})\r\n        return promise\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        const promise =\r\n            instance.delete<ResponseType>(`${todoListId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, modelTask: UpdateModelTaskType) {\r\n        const promise =\r\n            instance.put<ResponseType>(`${todolistId}/tasks/${taskId}`,  modelTask)\r\n        return promise\r\n    }\r\n} ","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemPropsType)  {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n       if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant='outlined'\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       disabled={disabled}\r\n            />\r\n            <IconButton color='primary' onClick={addItemHandler} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>)\r\n\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype  EditableSpanPropsType = {\r\n    title: string;\r\n    onChangeTitle: (newTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    console.log('EditableSpan called')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    function activateEditMode() {\r\n        props.disabled ? setEditMode(false)\r\n        :setEditMode(true);\r\n        setTitle(props.title)\r\n    }\r\n\r\n    function deactivateEditMode() {\r\n        setEditMode(false);\r\n        props.onChangeTitle(title)\r\n    }\r\n\r\n    function onChangeInputValue(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant='outlined'\r\n                     value={title}\r\n                     autoFocus\r\n                     onChange={onChangeInputValue}\r\n                     onBlur={deactivateEditMode}/>\r\n        : <span onDoubleClick={activateEditMode} >{props.title}</span>\r\n\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {TaskStatuses} from \"../../api/tasks-api\";\r\nimport {TaskDomainType} from \"../../state/tasks-reducer\";\r\n\r\n\r\ntype PropsTaskType = {\r\n    task: TaskDomainType,\r\n    removeTask: (id: string, todoListId: string) => void,\r\n    changeStatus: (id: string, status: TaskStatuses, todoListId: string) => void,\r\n    todoListId: string,\r\n    changeTaskTitle: (id: string, newTitle: string, todoListId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(function (props: PropsTaskType) {\r\n\r\n        console.log(\"Task called\")\r\n\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todoListId)\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newtTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newtTitle, props.todoListId)\r\n    }, [props])\r\n\r\n    const disabled = props.task.entityTaskStatus === 'loading'\r\n\r\n\r\n        return <div key={props.task.id}\r\n                    className={props.task.status === TaskStatuses.Completed? 'isDone' : ''}>\r\n            <Checkbox color={\"primary\"}\r\n                      checked={props.task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeStatusHandler} disabled={disabled}\r\n            />\r\n            <EditableSpan title={props.task.title} onChangeTitle={onChangeTitleHandler} disabled={disabled}/>\r\n            <IconButton onClick={onClickHandler} disabled={disabled}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    }\r\n)\r\n","import axios from 'axios'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n\r\nexport const todoListsApi = {\r\n    updateTodoList(todoListId: string, title: string) {\r\n        const promise =\r\n            instance.put<ResponseType>(`todo-lists/${todoListId}`, {title: title})\r\n        return promise\r\n    },\r\n    getTodoLists() {\r\n        const promise =\r\n            instance.get<Array<TodoListType>>('/todo-lists')\r\n        return promise\r\n    },\r\n    createTodoList(title: string) {\r\n        const promise =\r\n            instance.post<ResponseType<{item: TodoListType }>>('todo-lists', {title: title})\r\n        return promise\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        const promise =\r\n            instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n        return promise\r\n    }\r\n}","import {todoListsApi, TodoListType} from \"../api/todoLists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: Array<TodoListDomainType> = [];\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'todoList',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTodoListsAC(state, action: PayloadAction<{ todoLists: Array<TodoListType> }>) {\r\n            return  action.payload.todoLists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: 'succeeded'\r\n            }))\r\n        },\r\n        removeTodoListAC(state, action: PayloadAction<{ todoListId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodoListAC(state, action: PayloadAction<{ todoList: TodoListType }>) {\r\n            state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodoListTitleAC(state, action: PayloadAction<{ newTitle: string, todoListId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].title = action.payload.newTitle;\r\n        },\r\n        changeTodoListFilterAC(state, action: PayloadAction<{ newFilter: FilterValuesType, todoListId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].filter = action.payload.newFilter;\r\n        },\r\n        changeTodoListEntityStatusAC(state, action: PayloadAction<{ todoListId: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].entityStatus = action.payload.entityStatus;\r\n        }\r\n    }\r\n})\r\n\r\nexport const {setTodoListsAC, removeTodoListAC, addTodoListAC, changeTodoListTitleAC, changeTodoListFilterAC, changeTodoListEntityStatusAC} = slice.actions\r\n\r\nexport const todoListReducer = slice.reducer\r\n\r\n\r\n\r\n// Thunk\r\n\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todoListsApi.getTodoLists()\r\n            .then((res) => {\r\n                dispatch(setTodoListsAC({todoLists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        dispatch(changeTodoListEntityStatusAC({todoListId: todoListId, entityStatus: 'loading'}))\r\n        todoListsApi.deleteTodoList(todoListId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodoListAC({todoListId: todoListId}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleTC = (newTitle: string, todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todoListsApi.updateTodoList(todoListId, newTitle)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodoListTitleAC({newTitle: newTitle, todoListId: todoListId}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todoListsApi.createTodoList(title)\r\n            .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(addTodoListAC({todoList: res.data.data.item}))\r\n                        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                }\r\n            )\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport type AddTodoListActionType = ReturnType<typeof addTodoListAC>\r\nexport type ChangeTodoListEntityStatusActionType = ReturnType<typeof changeTodoListEntityStatusAC>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\n","import {tasksAPI, TaskType} from \"../api/tasks-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodoListAC, removeTodoListAC, setTodoListsAC} from \"./todoList-reducer\";\r\n\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityTaskStatus: RequestStatusType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todoListId: string }>) {\r\n            return {\r\n                ...state, [action.payload.todoListId]:\r\n                    action.payload.tasks.map((t: any) => ({\r\n                        ...t,\r\n                        entityTaskStatus: 'idle'\r\n                    }))\r\n            }\r\n        },\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todoListId: string }>) {\r\n            const index = state[action.payload.todoListId].findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                state[action.payload.todoListId].splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift({...action.payload.task, entityTaskStatus: 'idle'})\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, domainModel: UpdateDomainModelTaskType, todoListId: string }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        },\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ todoListId: string, taskId: string, entityTaskStatus: RequestStatusType }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], entityTaskStatus: action.payload.entityTaskStatus}\r\n            }\r\n        }\r\n    },\r\n    extraReducers: (bilder) => {\r\n        bilder.addCase(addTodoListAC, (state, action) => {\r\n            state[action.payload.todoList.id] = []\r\n        })\r\n        bilder.addCase(removeTodoListAC, (state, action) => {\r\n            delete state[action.payload.todoListId];\r\n        })\r\n        bilder.addCase(setTodoListsAC, (state, action) => {\r\n                action.payload.todoLists.forEach(tl => {\r\n                    state[tl.id] = [];\r\n                })\r\n            }\r\n        )\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {setTasksAC, changeTaskEntityStatusAC, updateTaskAC, addTaskAC, removeTaskAC} = slice.actions\r\n\r\n\r\n// Thunk\r\n\r\nexport const fetchTasksTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        tasksAPI.getTasks(todoListId)\r\n            .then((res) => {\r\n                dispatch(setTasksAC({tasks: res.data.items, todoListId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTasksTC = (taskId: string, todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}));\r\n        dispatch(changeTaskEntityStatusAC({todoListId, taskId, entityTaskStatus: \"loading\"}))\r\n        tasksAPI.deleteTask(todoListId, taskId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC({taskId, todoListId}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const addTaskTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.createTask(todoListId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC({task}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\ntype UpdateDomainModelTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainModelTaskType, todoListId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.log('task is not found in the state')\r\n            return\r\n        }\r\n        const apiModel = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        tasksAPI.updateTask(todoListId, taskId, apiModel).then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC({taskId, domainModel, todoListId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../common/AddItemsForm\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"../task/Task\";\r\nimport {TaskStatuses} from \"../../api/tasks-api\";\r\nimport {FilterValuesType, TodoListDomainType} from \"../../state/todoList-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC, TaskDomainType} from \"../../state/tasks-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    todoList: TodoListDomainType\r\n    tasks: Array<TaskDomainType>\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (todoListId: string, title: string) => void\r\n    changeStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n        console.log(\"Todolist called\")\r\n\r\n\r\n        const addTask = useCallback((title: string) => {\r\n            props.addTask(props.todoList.id, title);\r\n        }, [props])\r\n\r\n        const onAllClickHandler = useCallback(() => {\r\n            props.changeFilter('all', props.todoList.id)\r\n        }, [props]);\r\n\r\n        const onActiveClickHandler = useCallback(() => {\r\n            props.changeFilter('active', props.todoList.id)\r\n        }, [props]);\r\n\r\n        const onCompletedClickHandler = useCallback(() => {\r\n            props.changeFilter('completed', props.todoList.id)\r\n        }, [props]);\r\n\r\n\r\n        const removeTodoList = () => {\r\n            props.removeTodoList(props.todoList.id)\r\n        }\r\n\r\n        const changeTodoListTitle = useCallback((newtTitle: string) => {\r\n            props.changeTodoListTitle(newtTitle, props.todoList.id)\r\n        }, [props]);\r\n\r\n        let tasksForTodoList = props.tasks;\r\n\r\n        if (props.todoList.filter === 'active') {\r\n            tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n        }\r\n        if (props.todoList.filter === 'completed') {\r\n            tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n        }\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        useEffect(() => {\r\n            if (demo) {\r\n                return\r\n            }\r\n            dispatch(fetchTasksTC(props.todoList.id))\r\n        }, [demo, dispatch, props.todoList.id])\r\n\r\n        return <div>\r\n            <div className={'todoListTitle'}>\r\n                <h3><EditableSpan title={props.todoList.title} onChangeTitle={changeTodoListTitle}/></h3>\r\n                <IconButton onClick={removeTodoList} disabled={props.todoList.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n            <AddItemForm addItem={addTask} disabled={props.todoList.entityStatus === 'loading'}/>\r\n            <div>\r\n                {tasksForTodoList.map(task => <Task\r\n                    key={task.id}\r\n                    task={task} removeTask={props.removeTask}\r\n                    changeStatus={props.changeStatus} todoListId={props.todoList.id}\r\n                    changeTaskTitle={props.changeTaskTitle}/>)}\r\n            </div>\r\n            <div>\r\n                <Button variant={props.todoList.filter === 'all' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color='default'\r\n                >All\r\n                </Button>\r\n                <Button variant={props.todoList.filter === 'active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n                        color='primary'\r\n                >Active\r\n                </Button>\r\n                <Button variant={props.todoList.filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}\r\n                        color='secondary'\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n)\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport {AddItemForm} from \"../../common/AddItemsForm\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {TodoList} from \"../todoList/TodoList\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {\r\n    addTodoListTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    TodoListDomainType\r\n} from \"../../state/todoList-reducer\";\r\nimport {addTaskTC, removeTasksTC, updateTaskTC} from \"../../state/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/tasks-api\";\r\nimport {TasksStateType} from \"../app/AppWithRedux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoLists: React.FC<PropsType> = ({demo=false}) => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todoListId: string) {\r\n        dispatch(removeTasksTC(id, todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (todoListId: string, title: string) {\r\n        dispatch(addTaskTC(todoListId, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todoListId: string) {\r\n        dispatch(updateTaskTC(id, {status}, todoListId))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todoListId: string) {\r\n        dispatch(changeTodoListFilterAC({newFilter: value, todoListId}))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback(function (id: string) {\r\n        dispatch(removeTodoListTC(id))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback(function (title: string) {\r\n        dispatch(addTodoListTC(title));\r\n    }, [dispatch])\r\n\r\n    const changeTitle = useCallback(function (id: string, newTitle: string, todoListId: string) {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback(function (newTitle: string, todoListId: string) {\r\n        dispatch(changeTodoListTitleTC(newTitle, todoListId))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [demo, dispatch, isLoggedIn])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n\r\n        <Grid container spacing={3}>{\r\n            todoLists.map(tl => {\r\n\r\n                    let tasksForTodoList = tasks[tl.id];\r\n\r\n                    return <Grid key={tl.id} item>\r\n                        <Paper style={{padding: \"10px\", backgroundColor: '#cfe8fc'}}>\r\n                            <TodoList\r\n                                todoList={tl}\r\n                                tasks={tasksForTodoList}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeStatus={changeStatus}\r\n                                removeTodoList={removeTodoList}\r\n                                changeTaskTitle={changeTitle}\r\n                                changeTodoListTitle={changeTodoListTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                }\r\n            )}\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    type FormErrorType = {\r\n        email: string\r\n        password: string\r\n        rememberMe: boolean\r\n        captcha?: string\r\n    }\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch()\r\n\r\n    const validate = (values: FormErrorType) => {\r\n        const errors: any = {};\r\n        if (!values.email) {\r\n            errors.email = 'Email is required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Password is required';\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target='_blank' rel=\"noopener noreferrer\">here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {ErrorSnackbar} from \"../../common/Allert\";\r\nimport {TodoLists} from \"../todoLists/TodoLists\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"../../state/app-reducer\";\r\nimport {BrowserRouter, HashRouter, Route} from 'react-router-dom';\r\nimport {Login} from \"../../features/login/Login\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {logoutTC} from '../../features/login/auth-reducer';\r\nimport {TaskDomainType} from \"../../state/tasks-reducer\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const AppWithRedux = ({demo = false}: PropsType) => {\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    })\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color='secondary'/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodoLists demo={demo}/>}/>\r\n                <Route exact path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todoListReducer} from \"./todoList-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport  const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware =>\r\n        getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker'\nimport AppWithRedux from \"./components/app/AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from './state/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <AppWithRedux/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}