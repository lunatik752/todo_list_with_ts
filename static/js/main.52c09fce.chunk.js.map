{"version":3,"sources":["serviceWorker.ts","utils/redux-utils.ts","features/CommonActions/App.ts","common/Alert.tsx","api/types.ts","common/AddItemsForm.tsx","common/EditableSpan.tsx","components/task/selectors.ts","api/instance.ts","api/tasks-api.ts","utils/error-utils.ts","api/todoLists-api.ts","components/todoLists/todoList-reducer.ts","components/task/tasks-reducer.ts","components/task/index.tsx","components/task/Task.tsx","components/todoLists/selectors.ts","components/todoLists/index.tsx","components/todoList/TodoList.tsx","features/login/selectors.ts","api/auth-api.ts","features/login/auth-reducer.ts","features/login/Login.tsx","features/login/index.tsx","components/todoLists/TodoLists.tsx","components/app/selectors.ts","components/app/app-reducer.ts","components/app/index.tsx","components/app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","useAppDispatch","useDispatch","useActions","actions","dispatch","useMemo","bindActionCreators","appActions","setAppStatus","createAction","setAppError","Alert","props","elevation","variant","ErrorSnackbar","error","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","useState","title","setTitle","setError","addItemHandler","a","trim","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","style","marginLeft","AddBox","EditableSpan","console","log","editMode","setEditMode","autoFocus","onBlur","onChangeTitle","onDoubleClick","selectTasks","tasks","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todoListId","get","post","taskId","delete","todolistId","modelTask","put","handleServerAppError","data","thunkAPI","messages","length","status","handleServerNetworkError","message","todoListsApi","fetchTodoListsTC","createAsyncThunk","param","res","todoLists","rejectWithValue","removeTodoListTC","changeTodoListEntityStatus","entityStatus","resultCode","changeTodoListTitleTC","params","newTitle","addTodoListTC","todoList","item","asyncActions","slice","createSlice","name","initialState","reducers","changeTodoListFilter","action","index","findIndex","tl","id","payload","filter","newFilter","extraReducers","builder","addCase","fulfilled","map","splice","unshift","todoListReducer","reducer","fetchTasks","items","removeTask","changeTaskEntityStatusAC","entityTaskStatus","addTask","errors","fieldsErrors","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","domainModel","asyncTodoListsActions","forEach","model","tasksReducer","tasksActions","tasksAsyncActions","Task","onClickHandler","useCallback","onChangeTitleHandler","newtTitle","key","className","Completed","position","display","alignItems","Checkbox","checked","newIsDoneValue","New","right","Delete","selectTodoList","todoListsActions","todoListsAsyncActions","TodoList","demo","addTaskCallback","helper","thunk","resultAction","rejected","changeTodoListTitle","onFilterButtonClickHandler","buttonFilter","tasksForTodoList","useEffect","renderFilterButton","text","Button","top","padding","selectIsLoggedIn","auth","isLoggedIn","authAPI","login","logout","setIsLoggedIn","authReducer","Login","authSelectors","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","formikHelpers","authActions","setFieldError","field","to","Grid","container","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","authAsyncActions","TodoLists","todoListsSelectors","tasksSelectors","addTodoListCallback","spacing","flexWrap","overflowX","Paper","backgroundColor","width","selectStatus","selectIsInitialized","isInitialized","initializeApp","appReducer","appAsyncActions","AppWithRedux","appSelectors","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.52c09fce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"./types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [actions, dispatch])\r\n}\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestErrorType, RequestStatusType} from \"../../components/app/app-reducer\";\r\n\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: RequestErrorType}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {RequestErrorType} from \"../components/app/app-reducer\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\nimport {appActions} from '../features/CommonActions/App';\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, RequestErrorType>(state => state.app.error)\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n\r\n        }\r\n        setAppError({error: null})\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n\r\n\r\n","\r\nexport type AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateModelTaskType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\n\r\ntype AddItemPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemPropsType) {\r\n\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async  () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant='outlined'\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       disabled={disabled}\r\n            />\r\n            <IconButton color='primary' onClick={addItemHandler} disabled={disabled} style={{marginLeft: '10px'}}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>)\r\n\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype  EditableSpanPropsType = {\r\n    title: string;\r\n    onChangeTitle: (newTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    console.log('EditableSpan called')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    function activateEditMode() {\r\n        props.disabled ? setEditMode(false)\r\n        :setEditMode(true);\r\n        setTitle(props.title)\r\n    }\r\n\r\n    function deactivateEditMode() {\r\n        setEditMode(false);\r\n        props.onChangeTitle(title)\r\n    }\r\n\r\n    function onChangeInputValue(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant='outlined'\r\n                     value={title}\r\n                     autoFocus\r\n                     onChange={onChangeInputValue}\r\n                     onBlur={deactivateEditMode}/>\r\n        : <span onDoubleClick={activateEditMode} >{props.title}</span>\r\n\r\n})\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectTasks = (state: AppRootStateType) => state.tasks;\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n","import {GetTasksResponseType, ResponseType, TaskType, UpdateModelTaskType} from \"./types\";\r\nimport {instance} from \"./instance\";\r\n\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todoListId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title})\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, modelTask: UpdateModelTaskType) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, modelTask)\r\n    }\r\n}\r\n","import {ResponseType} from \"../api/types\";\r\nimport {AxiosError} from \"axios\";\r\nimport {appActions} from \"../features/CommonActions/App\";\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, thunkAPI: ThunkAPIType,\r\n                                        showError = true) => {\r\n    if (data.messages.length) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages[0]}))\r\n    } else {\r\n        thunkAPI.dispatch(appActions.setAppError({error: 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: AxiosError,\r\n                                         thunkAPI: ThunkAPIType,\r\n                                         showError = true) => {\r\n    thunkAPI.dispatch(appActions.setAppError(error.message ? {error: error.message} : {error: 'Some error occurred'}))\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n}\r\n\r\n\r\n","import {ResponseType, TodoListType} from \"./types\";\r\nimport {instance} from \"./instance\";\r\n\r\n\r\nexport const todoListsApi = {\r\n    updateTodoList(todoListId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todoListId}`, {title: title})\r\n    },\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListType>>('/todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n    }\r\n}\r\n","import {todoListsApi} from \"../../api/todoLists-api\";\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {TodoListType} from \"../../api/types\";\r\nimport {ThunkError} from \"../../utils/types\";\r\nimport { appActions } from \"../../features/CommonActions/App\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n const fetchTodoListsTC = createAsyncThunk('todoLists/fetchTodoLists', async (param, thunkAPI) => {\r\n     thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\r\n    try {\r\n        const res = await todoListsApi.getTodoLists();\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n        return {todoLists: res.data}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n const removeTodoListTC = createAsyncThunk('todoLists/removeTodoList', async (todoListId: string, thunkAPI) => {\r\n     thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n     thunkAPI.dispatch(changeTodoListEntityStatus({todoListId: todoListId, entityStatus: 'loading'}))\r\n    try {\r\n        const res = await todoListsApi.deleteTodoList(todoListId);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todoListId: todoListId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\n const changeTodoListTitleTC = createAsyncThunk('todoLists/changeTodoListTitle', async (params: { newTitle: string, todoListId: string }, thunkAPI) => {\r\n     thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await todoListsApi.updateTodoList(params.todoListId, params.newTitle);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {newTitle: params.newTitle, todoListId: params.todoListId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\n const addTodoListTC = createAsyncThunk<{ todoList: TodoListType }, string, ThunkError>('todoLists/addTodoList', async (title: string, thunkAPI ): Promise<any> => {\r\n     thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await todoListsApi.createTodoList(title);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todoList: res.data.data.item}\r\n        } else {\r\n            return handleServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n       return  handleServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodoListsTC,\r\n    removeTodoListTC,\r\n    changeTodoListTitleTC,\r\n    addTodoListTC\r\n}\r\n\r\nexport  const slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: [] as Array<TodoListDomainType>,\r\n    reducers: {\r\n        changeTodoListFilter(state, action: PayloadAction<{ newFilter: FilterValuesType, todoListId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].filter = action.payload.newFilter;\r\n        },\r\n        changeTodoListEntityStatus(state, action: PayloadAction<{ todoListId: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].entityStatus = action.payload.entityStatus;\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\r\n            return action.payload.todoLists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: 'idle'\r\n            }))\r\n        })\r\n        builder.addCase(removeTodoListTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(changeTodoListTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].title = action.payload.newTitle;\r\n        })\r\n        builder.addCase(addTodoListTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n    }\r\n})\r\n\r\nexport const {changeTodoListFilter, changeTodoListEntityStatus} = slice.actions\r\n\r\nexport const todoListReducer = slice.reducer\r\n\r\n\r\n\r\n","import {tasksAPI} from \"../../api/tasks-api\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {TaskType, UpdateModelTaskType} from \"../../api/types\";\r\nimport {ThunkError} from \"../../utils/types\";\r\nimport {appActions} from \"../../features/CommonActions/App\";\r\nimport {asyncActions as asyncTodoListsActions} from './../todoLists/todoList-reducer'\r\n\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityTaskStatus: RequestStatusType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\n\r\nconst fetchTasks = createAsyncThunk<{ tasks: TaskType[], todoListId: string }, string, ThunkError>('tasks/fetchTasks', async (todoListId: string, thunkAPI): Promise<any> => {\r\n    debugger\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: \"loading\"}));\r\n    try {\r\n        const res = await tasksAPI.getTasks(todoListId);\r\n        const tasks = res.data.items;\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}));\r\n        return {tasks, todoListId}\r\n    } catch (error) {\r\n        return  handleServerNetworkError(error, thunkAPI)\r\n\r\n    }\r\n})\r\n\r\n\r\nconst removeTask = createAsyncThunk<{ taskId: string, todoListId: string }, { taskId: string, todoListId: string }, ThunkError>('tasks/removeTask', async (param: { taskId: string, todoListId: string }, thunkAPI): Promise<any> => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: \"loading\"}));\r\n    thunkAPI.dispatch(changeTaskEntityStatusAC({\r\n        todoListId: param.todoListId,\r\n        taskId: param.taskId,\r\n        entityTaskStatus: \"loading\"\r\n    }))\r\n    try {\r\n        const res = await tasksAPI.deleteTask(param.todoListId, param.taskId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n            return {taskId: param.taskId, todoListId: param.todoListId}\r\n        } else {\r\n         return    handleServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch\r\n        (error) {\r\n       return  handleServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\n\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todoListId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI): Promise<any> => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.createTask(param.todoListId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    }\r\n)\r\n\r\nconst updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainModelTaskType, todoListId: string }, thunkAPI): Promise<any> => {\r\n    // thunkAPI.dispatch(appActions.setAppStatus({status: \"loading\"}))\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todoListId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateModelTaskType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n    const res = await tasksAPI.updateTask(param.todoListId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            // thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch\r\n        (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ todoListId: string, taskId: string, entityTaskStatus: RequestStatusType }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], entityTaskStatus: action.payload.entityTaskStatus}\r\n            }\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodoListsActions.addTodoListTC.fulfilled, (state, action) => {\r\n                debugger\r\n                state[action.payload.todoList.id] = []\r\n            })\r\n            .addCase(asyncTodoListsActions.removeTodoListTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.todoListId];\r\n            })\r\n            .addCase(asyncTodoListsActions.fetchTodoListsTC.fulfilled, (state, action) => {\r\n                    action.payload.todoLists.forEach(tl => {\r\n                        state[tl.id] = [];\r\n                    })\r\n                }\r\n            )\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                    state[action.payload.todoListId] = action.payload.tasks.map((t: any) => ({\r\n                        ...t,\r\n                        entityTaskStatus: 'idle'\r\n                    }))\r\n                }\r\n            )\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                    const index = state[action.payload.todoListId].findIndex(t => t.id === action.payload.taskId)\r\n                    if (index > -1) {\r\n                        state[action.payload.todoListId].splice(index, 1)\r\n                    }\r\n                }\r\n            )\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                    state[action.payload.todoListId].unshift({...action.payload, entityTaskStatus: 'idle'})\r\n                }\r\n            )\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n\r\n    }\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {changeTaskEntityStatusAC} = slice.actions\r\n\r\n\r\ntype UpdateDomainModelTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import * as tasksSelectors from './selectors'\r\nimport {asyncActions as tasksAsyncActions, slice} from './tasks-reducer'\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    tasksActions,\r\n    tasksSelectors\r\n}\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {TaskDomainType} from \"./tasks-reducer\";\r\nimport {tasksActions} from \"./index\";\r\nimport {useActions} from \"../../utils/redux-utils\";\r\nimport {TaskStatuses} from \"../../api/types\";\r\n\r\n\r\ntype PropsTaskType = {\r\n    task: TaskDomainType,\r\n    todoListId: string,\r\n}\r\n\r\nexport const Task = React.memo(function (props: PropsTaskType) {\r\n\r\n        const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n        const onClickHandler =  useCallback(() => removeTask({taskId: props.task.id, todoListId: props.todoListId}),\r\n            [removeTask, props.task.id, props.todoListId])\r\n\r\n        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            updateTask({taskId: props.task.id,\r\n            domainModel: {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todoListId: props.todoListId})\r\n        }\r\n\r\n        const onChangeTitleHandler = useCallback((newtTitle: string) => {\r\n            updateTask({taskId: props.task.id,\r\n                domainModel: {title: newtTitle},\r\n                todoListId: props.todoListId})\r\n        }, [updateTask, props.task.id, props.todoListId])\r\n\r\n        const disabled = props.task.entityTaskStatus === 'loading'\r\n\r\n\r\n        return <div key={props.task.id}\r\n                    className={props.task.status === TaskStatuses.Completed ? 'isDone' : ''}\r\n                    style={{position: 'relative', display: 'flex', alignItems: 'center'}}>\r\n            <Checkbox color={\"primary\"}\r\n                      checked={props.task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeStatusHandler} disabled={disabled}\r\n            />\r\n            <EditableSpan title={props.task.title}\r\n                          onChangeTitle={onChangeTitleHandler}\r\n                          disabled={disabled}\r\n                          />\r\n            <IconButton onClick={onClickHandler} disabled={disabled} style={{position: 'absolute', right: '5px'}}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    }\r\n)\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectTodoList = (state: AppRootStateType) => state.todoLists;\r\n","import * as todoListsSelectors from './selectors'\r\nimport {asyncActions as todoListsAsyncActions, slice} from \"./todoList-reducer\";\r\n\r\n\r\n\r\nconst todoListsActions = {\r\n    ...todoListsAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    todoListsActions,\r\n    todoListsSelectors,\r\n\r\n}\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../common/AddItemsForm\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {Button, IconButton, PropTypes} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"../task/Task\";\r\nimport {FilterValuesType, TodoListDomainType} from \"../todoLists/todoList-reducer\";\r\nimport {TaskDomainType} from \"../task/tasks-reducer\";\r\nimport {tasksActions} from \"../task\";\r\nimport {todoListsActions} from \"../todoLists\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {TaskStatuses} from \"../../api/types\";\r\n\r\n\r\ntype PropsType = {\r\n    todoList: TodoListDomainType\r\n    tasks: Array<TaskDomainType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n        const {fetchTasks} = useActions(tasksActions)\r\n        const {changeTodoListFilter, removeTodoListTC, changeTodoListTitleTC} = useActions(todoListsActions)\r\n\r\n        const dispatch = useAppDispatch()\r\n\r\n        const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n            let thunk = tasksActions.addTask({title: title, todoListId: props.todoList.id,});\r\n            const resultAction = await dispatch(thunk);\r\n            if (tasksActions.addTask.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.errors?.length) {\r\n                    const error = resultAction.payload.errors[0]\r\n                    helper.setError(error)\r\n                } else {\r\n                    helper.setError('Some error occurred')\r\n                }\r\n            } else {\r\n                helper.setTitle('')\r\n            }\r\n        }, [dispatch, props.todoList.id])\r\n\r\n\r\n        const removeTodoList = () => {\r\n            removeTodoListTC(props.todoList.id)\r\n        }\r\n\r\n        const changeTodoListTitle = useCallback((newtTitle: string) => {\r\n            changeTodoListTitleTC({newTitle: newtTitle, todoListId: props.todoList.id})\r\n        }, [changeTodoListTitleTC, props.todoList.id]);\r\n\r\n        const onFilterButtonClickHandler = useCallback((buttonFilter: FilterValuesType) => {\r\n            changeTodoListFilter({newFilter: buttonFilter, todoListId: props.todoList.id})\r\n        }, [changeTodoListFilter, props.todoList.id]);\r\n\r\n        let tasksForTodoList = props.tasks;\r\n\r\n        if (props.todoList.filter === 'active') {\r\n            tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n        }\r\n        if (props.todoList.filter === 'completed') {\r\n            tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n        }\r\n\r\n\r\n        useEffect(() => {\r\n            if (demo) {\r\n                return\r\n            }\r\n            fetchTasks(props.todoList.id)\r\n        }, [demo, fetchTasks, props.todoList.id])\r\n\r\n\r\n        const renderFilterButton = (\r\n            buttonFilter: FilterValuesType,\r\n            color: PropTypes.Color,\r\n            text: string) => {\r\n            return <Button variant={props.todoList.filter === buttonFilter ? 'outlined' : 'text'}\r\n                           onClick={() => {\r\n                               onFilterButtonClickHandler(buttonFilter);\r\n                           }}\r\n                           color={color}>\r\n                {text}\r\n            </Button>\r\n        }\r\n\r\n        return <div style={{position: 'relative'}}>\r\n            <div className={'todoListTitle'}>\r\n                <IconButton style={{position: 'absolute', right: '5px', top: '7px'}} onClick={removeTodoList}\r\n                            disabled={props.todoList.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                <h3><EditableSpan title={props.todoList.title} onChangeTitle={changeTodoListTitle}/></h3>\r\n\r\n            </div>\r\n            <AddItemForm addItem={addTaskCallback} disabled={props.todoList.entityStatus === 'loading'}/>\r\n            <div>\r\n\r\n                {!tasksForTodoList.length && <div style={{padding: '10px', color: 'gray'}}>No tasks</div>}\r\n                {tasksForTodoList.map(task => <Task\r\n                    key={task.id}\r\n                    task={task}\r\n                    todoListId={props.todoList.id}/>)}\r\n            </div>\r\n            <div>\r\n                {renderFilterButton(\"all\", \"default\", 'All')}\r\n                {renderFilterButton(\"active\", \"primary\", 'Active')}\r\n                {renderFilterButton(\"completed\", \"secondary\", 'Completed')}\r\n            </div>\r\n        </div>\r\n    }\r\n)\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;\r\n\r\n","import {AuthResponseDataType, LoginParamsType, ResponseType} from \"./types\";\r\nimport {instance} from \"./instance\";\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<AuthResponseDataType>>(`auth/me`)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('/auth/login', data)\r\n    },\r\n    logout() {\r\n        debugger\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n","import {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {authAPI} from '../../api/auth-api';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {FieldErrorType, LoginParamsType} from \"../../api/types\";\r\nimport { appActions } from '../CommonActions/App';\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport type InitialAuthReducerStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI): Promise<any> => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI)\r\n\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\n// типизацию logoutTC можно не делать так как этой санкой мы не пользуемся снаружи\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true;\r\n            }\r\n        )\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false;\r\n            }\r\n        )\r\n    }\r\n})\r\n\r\n\r\nexport const authReducer = slice.reducer;\r\n\r\nexport const {setIsLoggedIn} = slice.actions\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {login} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {authActions, authSelectors} from \"./index\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n\r\n    type FormErrorType = {\r\n        email: string\r\n        password: string\r\n        rememberMe: boolean\r\n        captcha?: string\r\n    }\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(authSelectors.selectIsLoggedIn);\r\n    const dispatch = useAppDispatch()\r\n\r\n    const validate = (values: FormErrorType) => {\r\n        const errors: any = {};\r\n        if (!values.email) {\r\n            errors.email = 'Email is required';\r\n        }\r\n        /* else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n             errors.email = 'Invalid email address';\r\n         }*/\r\n        if (!values.password) {\r\n            errors.password = 'Password is required';\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(authActions.login(values));\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target='_blank' rel=\"noopener noreferrer\">here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport { Login } from './Login'\r\nimport {asyncActions as authAsyncActions, slice} from  './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    authSelectors,\r\n    authActions,\r\n    Login\r\n}\r\n\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../common/AddItemsForm\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {TodoList} from \"../todoList/TodoList\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {authSelectors} from \"../../features/login\";\r\nimport {todoListsActions, todoListsSelectors} from \"./index\";\r\nimport {tasksSelectors} from \"../task\";\r\n\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoLists: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n\r\n    const todoLists = useSelector(todoListsSelectors.selectTodoList);\r\n    const tasks = useSelector(tasksSelectors.selectTasks);\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const {fetchTodoListsTC} = useActions(todoListsActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodoListsTC()\r\n    }, [demo, fetchTodoListsTC, isLoggedIn])\r\n\r\n    const addTodoListCallback = useCallback(async  (title: string,  helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todoListsActions.addTodoListTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n        if (todoListsActions.addTodoListTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const error = resultAction.payload?.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodoListCallback}/>\r\n        </Grid>\r\n\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap',  overflowX: 'scroll'}}>{\r\n            todoLists.map(tl => {\r\n\r\n                    let tasksForTodoList = tasks[tl.id];\r\n\r\n                    return <Grid key={tl.id} item>\r\n                        <Paper style={{padding: \"10px\", backgroundColor: '#cfe8fc', width: '300px'}}>\r\n                            <TodoList\r\n                                todoList={tl}\r\n                                tasks={tasksForTodoList}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                }\r\n            )}\r\n        </Grid>\r\n    </>\r\n}\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status;\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized;\r\n","import {authAPI} from \"../../api/auth-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {authActions} from \"../../features/login\";\r\nimport { appActions } from \"../../features/CommonActions/App\";\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type RequestErrorType = null | string\r\n\r\n\r\nexport type InitialAppReducerStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // сюда будет записан текст ошибки - если произойдет какая-то глобальлная ошибка\r\n    error: RequestErrorType\r\n    //isInitialized === true когда приложение проиницилизировалось\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const initializeApp = createAsyncThunk('auth/app', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(authActions.setIsLoggedIn({value: true}));\r\n        } else {\r\n\r\n        }\r\n})\r\n\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialAppReducerStateType,\r\n    reducers: {},\r\n    extraReducers: (builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    })\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\n\r\nexport const appReducer = slice.reducer;\r\n\r\n\r\n","import * as appSelectors from './selectors'\r\nimport {asyncActions as appAsyncActions, slice} from \"./app-reducer\";\r\n\r\n\r\nconst appActions = {\r\n    ...appAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\n\r\nexport {\r\n    appSelectors,\r\n    appActions\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {ErrorSnackbar} from \"../../common/Alert\";\r\nimport {TodoLists} from \"../todoLists/TodoLists\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Route} from 'react-router-dom';\r\nimport {authActions, authSelectors, Login} from \"../../features/login\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {TaskDomainType} from \"../task/tasks-reducer\";\r\nimport {appActions, appSelectors} from '.';\r\nimport {useActions} from \"../../utils/redux-utils\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const AppWithRedux = ({demo = false}: PropsType) => {\r\n\r\n\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const status = useSelector(appSelectors.selectStatus)\r\n    const {initializeApp} = useActions(appActions)\r\n    const {logout} = useActions(authActions)\r\n\r\n\r\n    const isInitialized = useSelector(appSelectors.selectIsInitialized)\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    })\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logout}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color='secondary'/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodoLists demo={demo}/>}/>\r\n                <Route exact path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../components/task/tasks-reducer\";\r\nimport {todoListReducer} from \"../components/todoLists/todoList-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../components/app/app-reducer\";\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {RootReducerType} from \"../utils/types\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware =>\r\n        getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker'\r\nimport AppWithRedux from \"./components/app/AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <AppWithRedux/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}