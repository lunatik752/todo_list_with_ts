{"version":3,"sources":["serviceWorker.ts","utils/error-utils.ts","api/auth-api.ts","features/login/auth-reducer.ts","components/app/app-reducer.ts","common/Allert.tsx","api/tasks-api.ts","common/AddItemsForm.tsx","common/EditableSpan.tsx","components/task/Task.tsx","components/todoLists/selectors.ts","api/todoLists-api.ts","components/todoLists/todoList-reducer.ts","components/todoLists/index.tsx","components/task/tasks-reducer.ts","state/store.ts","components/task/selectors.ts","components/task/index.tsx","components/todoList/TodoList.tsx","features/login/selectors.ts","features/login/Login.tsx","features/login/index.tsx","components/todoLists/TodoLists.tsx","components/app/selectors.ts","components/app/index.tsx","components/app/AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","handleServerAppError","data","dispatch","messages","length","setAppError","error","setAppStatus","status","handleServerNetworkError","message","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","post","delete","login","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logout","asyncActions","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","setIsLoggedIn","actions","initializeApp","isInitialized","appReducer","Alert","props","elevation","variant","ErrorSnackbar","useSelector","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","console","log","useState","title","setTitle","setError","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onChangeTitle","onDoubleClick","tasksAPI","todoListId","taskId","todolistId","modelTask","put","Task","onChangeTitleHandler","useCallback","newtTitle","changeTaskTitle","task","id","entityTaskStatus","key","className","Completed","Checkbox","checked","newIsDoneValue","changeStatus","New","removeTask","Delete","selectTodoList","todoLists","todoListsApi","fetchTodoListsTC","removeTodoListTC","changeTodoListEntityStatus","entityStatus","changeTodoListTitleTC","params","newTitle","addTodoListTC","todoList","item","changeTodoListFilter","index","findIndex","tl","filter","newFilter","map","splice","unshift","todoListReducer","todoListsActions","todoListsAsyncActions","fetchTasks","tasks","items","changeTaskEntityStatusAC","addTask","updateTask","getState","find","t","apiModel","startDate","priority","description","deadline","domainModel","forEach","tasksReducer","rootReducer","combineReducers","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppDispatch","useActions","useMemo","bindActionCreators","selectTasks","tasksActions","tasksAsyncActions","TodoList","demo","changeTaskStatus","addTaskCallback","onFilterButtonClickHandler","buttonFilter","changeTodoListTitle","tasksForTodoList","useEffect","renderFilterButton","text","Button","selectIsLoggedIn","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","formikHelpers","authActions","rejected","setFieldError","field","to","Grid","container","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","style","type","FormControlLabel","control","authAsyncActions","TodoLists","todoListsSelectors","tasksSelectors","authSelectors","padding","spacing","Paper","backgroundColor","selectStatus","selectIsInitialized","appActions","appAsyncActions","AppWithRedux","appSelectors","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.561002b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Dispatch} from 'redux';\r\nimport {setAppError, setAppStatus} from \"../components/app/app-reducer\";\r\nimport {ResponseType} from \"../api/todoLists-api\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppError(error.message ? {error: error.message} : {error:'Some error occurred'}))\r\n    dispatch(setAppStatus({status:'failed'}))\r\n}\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<{ field: string, error: string }>\r\n    data: D\r\n}\r\n\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n     email: string\r\n     password: string\r\n     rememberMe: boolean\r\n     captcha?: string\r\n }\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<AuthResponseDataType>>(`auth/me`)\r\n    },\r\n    login(data: LoginParamsType) {\r\nreturn instance.post<ResponseType<{ userId?: number }>>( '/auth/login', data)\r\n    },\r\n    logout() {\r\n        debugger\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n","import {setAppStatus} from \"../../components/app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {authAPI, LoginParamsType} from '../../api/auth-api';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {FieldErrorType} from \"../../api/todoLists-api\";\r\n\r\nexport type InitialAuthReducerStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> }}>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n\r\n    }\r\n})\r\n\r\n// типизацию logoutTC можно не делать так как этой санкой мы не пользуемся снаружи\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true;\r\n            }\r\n        )\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false;\r\n            }\r\n        )\r\n    }\r\n})\r\n\r\n\r\n\r\nexport const authReducer = slice.reducer;\r\n\r\nexport const setIsLoggedIn = slice.actions.setIsLoggedInAC\r\n","import {setIsLoggedIn} from \"../../features/login/auth-reducer\";\r\nimport {authAPI} from \"../../api/auth-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type RequestErrorType = null | string\r\n\r\n\r\nexport type InitialAppReducerStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // сюда будет записан текст ошибки - если произойдет какая-то глобальлная ошибка\r\n    error: RequestErrorType\r\n    //isInitialized === true когда приложение проиницилизировалось\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const initializeApp = createAsyncThunk('auth/app', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({value: true}));\r\n        }\r\n})\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialAppReducerStateType,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{ error: RequestErrorType }>) {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n    extraReducers: (builder => {\r\n        builder.addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    })\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\n\r\nexport const appReducer = slice.reducer;\r\n\r\nexport const {setAppStatus, setAppError} = slice.actions\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {RequestErrorType, setAppError} from \"../components/app/app-reducer\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, RequestErrorType>( state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n\r\n        }\r\n        dispatch(setAppError({error:null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateModelTaskType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1//todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todoListId: string) {\r\n        const promise =\r\n            instance.get<GetTasksResponseType>(`${todoListId}/tasks`)\r\n        return promise\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        const promise =\r\n            instance.post<ResponseType<{item: TaskType }>>(`${todoListId}/tasks`, {title})\r\n        return promise\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        const promise =\r\n            instance.delete<ResponseType>(`${todoListId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, modelTask: UpdateModelTaskType) {\r\n        const promise =\r\n            instance.put<ResponseType>(`${todolistId}/tasks/${taskId}`,  modelTask)\r\n        return promise\r\n    }\r\n} ","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemPropsType)  {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n       if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant='outlined'\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       disabled={disabled}\r\n            />\r\n            <IconButton color='primary' onClick={addItemHandler} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>)\r\n\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype  EditableSpanPropsType = {\r\n    title: string;\r\n    onChangeTitle: (newTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    console.log('EditableSpan called')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    function activateEditMode() {\r\n        props.disabled ? setEditMode(false)\r\n        :setEditMode(true);\r\n        setTitle(props.title)\r\n    }\r\n\r\n    function deactivateEditMode() {\r\n        setEditMode(false);\r\n        props.onChangeTitle(title)\r\n    }\r\n\r\n    function onChangeInputValue(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant='outlined'\r\n                     value={title}\r\n                     autoFocus\r\n                     onChange={onChangeInputValue}\r\n                     onBlur={deactivateEditMode}/>\r\n        : <span onDoubleClick={activateEditMode} >{props.title}</span>\r\n\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {TaskStatuses} from \"../../api/tasks-api\";\r\nimport {TaskDomainType} from \"./tasks-reducer\";\r\n\r\n\r\ntype PropsTaskType = {\r\n    task: TaskDomainType,\r\n    removeTask: (params: {taskId: string, todoListId: string}) => void,\r\n    changeStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void,\r\n    todoListId: string,\r\n    changeTaskTitle: (id: string, newTitle: string, todoListId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(function (props: PropsTaskType) {\r\n\r\n        console.log(\"Task called\")\r\n\r\n    const onClickHandler = () => props.removeTask({taskId: props.task.id, todoListId: props.todoListId})\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newtTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newtTitle, props.todoListId)\r\n    }, [props])\r\n\r\n    const disabled = props.task.entityTaskStatus === 'loading'\r\n\r\n\r\n        return <div key={props.task.id}\r\n                    className={props.task.status === TaskStatuses.Completed? 'isDone' : ''}>\r\n            <Checkbox color={\"primary\"}\r\n                      checked={props.task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeStatusHandler} disabled={disabled}\r\n            />\r\n            <EditableSpan title={props.task.title} onChangeTitle={onChangeTitleHandler} disabled={disabled}/>\r\n            <IconButton onClick={onClickHandler} disabled={disabled}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    }\r\n)\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectTodoList = (state: AppRootStateType) => state.todoLists;\r\n","import axios from 'axios'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '90bf912e-ca5a-4b96-9037-858f400fe7a5'\r\n    }\r\n})\r\n\r\nexport const todoListsApi = {\r\n    updateTodoList(todoListId: string, title: string) {\r\n        const promise =\r\n            instance.put<ResponseType>(`todo-lists/${todoListId}`, {title: title})\r\n        return promise\r\n    },\r\n    getTodoLists() {\r\n        const promise =\r\n            instance.get<Array<TodoListType>>('/todo-lists')\r\n        return promise\r\n    },\r\n    createTodoList(title: string) {\r\n        const promise =\r\n            instance.post<ResponseType<{item: TodoListType }>>('todo-lists', {title: title})\r\n        return promise\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        const promise =\r\n            instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n        return promise\r\n    }\r\n}\r\n","import {todoListsApi, TodoListType} from \"../../api/todoLists-api\";\r\nimport {RequestStatusType, setAppStatus} from \"../app/app-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n const fetchTodoListsTC = createAsyncThunk('todoLists/fetchTodoLists', async (param, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: \"loading\"}));\r\n    try {\r\n        const res = await todoListsApi.getTodoLists();\r\n        dispatch(setAppStatus({status: 'succeeded'}));\r\n        return {todoLists: res.data}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\n const removeTodoListTC = createAsyncThunk('todoLists/removeTodoList', async (todoListId: string, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: \"loading\"}))\r\n    dispatch(changeTodoListEntityStatus({todoListId: todoListId, entityStatus: 'loading'}))\r\n    try {\r\n        const res = await todoListsApi.deleteTodoList(todoListId);\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todoListId: todoListId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\n const changeTodoListTitleTC = createAsyncThunk('todoLists/changeTodoListTitle', async (params: { newTitle: string, todoListId: string }, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await todoListsApi.updateTodoList(params.todoListId, params.newTitle);\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {newTitle: params.newTitle, todoListId: params.todoListId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\n const addTodoListTC = createAsyncThunk('todoLists/addTodoList', async (title: string, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const res = await todoListsApi.createTodoList(title);\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todoList: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodoListsTC,\r\n    removeTodoListTC,\r\n    changeTodoListTitleTC,\r\n    addTodoListTC\r\n}\r\n\r\nexport  const slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: [] as Array<TodoListDomainType>,\r\n    reducers: {\r\n        changeTodoListFilter(state, action: PayloadAction<{ newFilter: FilterValuesType, todoListId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].filter = action.payload.newFilter;\r\n        },\r\n        changeTodoListEntityStatus(state, action: PayloadAction<{ todoListId: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].entityStatus = action.payload.entityStatus;\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\r\n            return action.payload.todoLists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: 'idle'\r\n            }))\r\n        })\r\n        builder.addCase(removeTodoListTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(changeTodoListTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\r\n            state[index].title = action.payload.newTitle;\r\n        })\r\n        builder.addCase(addTodoListTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n    }\r\n})\r\n\r\nexport const {changeTodoListFilter, changeTodoListEntityStatus} = slice.actions\r\n\r\nexport const todoListReducer = slice.reducer\r\n\r\n\r\n\r\n","import * as todoListsSelectors from './selectors'\r\nimport {asyncActions as todoListsAsyncActions, slice} from \"./todoList-reducer\";\r\n\r\n\r\n\r\nconst todoListsActions = {\r\n    ...todoListsAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    todoListsActions,\r\n    todoListsSelectors,\r\n\r\n}\r\n\r\n","import {tasksAPI, TaskType} from \"../../api/tasks-api\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {RequestStatusType, setAppStatus} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {todoListsActions} from '../todoLists/'\r\n\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityTaskStatus: RequestStatusType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\n\r\nconst fetchTasks = createAsyncThunk('tasks/fetchTasks', async (todoListId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\r\n    try {\r\n        const res = await tasksAPI.getTasks(todoListId);\r\n        const tasks = res.data.items;\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n        return {tasks, todoListId}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst removeTask = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todoListId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\r\n    thunkAPI.dispatch(changeTaskEntityStatusAC({\r\n        todoListId: param.todoListId,\r\n        taskId: param.taskId,\r\n        entityTaskStatus: \"loading\"\r\n    }))\r\n    try {\r\n        const res = await tasksAPI.deleteTask(param.todoListId, param.taskId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {taskId: param.taskId, todoListId: param.todoListId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch\r\n        (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst addTask = createAsyncThunk('tasks/addTask', async (param: { todoListId: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await tasksAPI.createTask(param.todoListId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {task: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch\r\n        (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainModelTaskType, todoListId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todoListId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        console.log('task is not found in the state')\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n    const apiModel = {\r\n        title: task.title,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n    try {\r\n        const res = await tasksAPI.updateTask(param.todoListId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {taskId: param.taskId, domainModel: param.domainModel, todoListId: param.todoListId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch\r\n        (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ todoListId: string, taskId: string, entityTaskStatus: RequestStatusType }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], entityTaskStatus: action.payload.entityTaskStatus}\r\n            }\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(todoListsActions.addTodoListTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoList.id] = []\r\n        })\r\n        builder.addCase(todoListsActions.removeTodoListTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.todoListId];\r\n        })\r\n        builder.addCase(todoListsActions.fetchTodoListsTC.fulfilled, (state, action) => {\r\n                action.payload.todoLists.forEach(tl => {\r\n                    state[tl.id] = [];\r\n                })\r\n            }\r\n        )\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId] = action.payload.tasks.map((t: any) => ({...t, entityTaskStatus: 'idle'}))\r\n            }\r\n        )\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n                const index = state[action.payload.todoListId].findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    state[action.payload.todoListId].splice(index, 1)\r\n                }\r\n            }\r\n        )\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.task.todoListId].unshift({...action.payload.task, entityTaskStatus: 'idle'})\r\n            }\r\n        )\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n                }\r\n\r\n            }\r\n        )\r\n\r\n    }\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {changeTaskEntityStatusAC} = slice.actions\r\n\r\n\r\ntype UpdateDomainModelTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import {ActionCreatorsMapObject, bindActionCreators, combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../components/task/tasks-reducer\";\r\nimport {todoListReducer} from \"../components/todoLists/todoList-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../components/app/app-reducer\";\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useMemo} from \"react\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware =>\r\n        getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\ntype  AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [actions, dispatch])\r\n}\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectTasks = (state: AppRootStateType) => state.tasks;\r\n","import * as tasksSelectors from './selectors'\r\nimport {asyncActions as tasksAsyncActions, slice} from './tasks-reducer'\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    tasksActions,\r\n    tasksSelectors\r\n}\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../common/AddItemsForm\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {Button, IconButton, PropTypes} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"../task/Task\";\r\nimport {TaskStatuses} from \"../../api/tasks-api\";\r\nimport {FilterValuesType, TodoListDomainType} from \"../todoLists/todoList-reducer\";\r\nimport {TaskDomainType} from \"../task/tasks-reducer\";\r\nimport {useActions} from \"../../state/store\";\r\nimport {tasksActions} from \"../task\";\r\nimport {todoListsActions} from \"../todoLists\";\r\n\r\n\r\ntype PropsType = {\r\n    todoList: TodoListDomainType\r\n    tasks: Array<TaskDomainType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n        const {fetchTasks, addTask, removeTask, updateTask} = useActions(tasksActions)\r\n        const {changeTodoListFilter, removeTodoListTC, changeTodoListTitleTC} = useActions(todoListsActions)\r\n\r\n\r\n        const changeTaskStatus = useCallback(function (taskId: string, status: TaskStatuses, todoListId: string) {\r\n            updateTask({taskId, domainModel: {status}, todoListId})\r\n        }, [updateTask])\r\n\r\n        const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todoListId: string) {\r\n            updateTask({taskId, domainModel: {title: newTitle}, todoListId})\r\n        }, [updateTask])\r\n\r\n        const addTaskCallback = useCallback((title: string) => {\r\n            addTask({todoListId: props.todoList.id, title: title});\r\n        }, [addTask, props.todoList.id])\r\n\r\n        const onFilterButtonClickHandler = useCallback((buttonFilter: FilterValuesType) => {\r\n            changeTodoListFilter({newFilter: buttonFilter, todoListId: props.todoList.id})\r\n        }, [changeTodoListFilter, props.todoList.id]);\r\n\r\n        const removeTodoList = () => {\r\n            removeTodoListTC(props.todoList.id)\r\n        }\r\n\r\n        const changeTodoListTitle = useCallback((newtTitle: string) => {\r\n            changeTodoListTitleTC({newTitle: newtTitle, todoListId: props.todoList.id})\r\n        }, [changeTodoListTitleTC, props.todoList.id]);\r\n\r\n        let tasksForTodoList = props.tasks;\r\n\r\n        if (props.todoList.filter === 'active') {\r\n            tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n        }\r\n        if (props.todoList.filter === 'completed') {\r\n            tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n        }\r\n\r\n\r\n        useEffect(() => {\r\n            if (demo) {\r\n                return\r\n            }\r\n            fetchTasks(props.todoList.id)\r\n        }, [demo, fetchTasks, props.todoList.id])\r\n\r\n\r\n        const renderFilterButton = (\r\n            buttonFilter: FilterValuesType,\r\n                                    color: PropTypes.Color,\r\n                                    text: string) => {\r\n            return <Button variant={props.todoList.filter === buttonFilter ? 'outlined' : 'text'}\r\n                           onClick={() => {\r\n                               onFilterButtonClickHandler(buttonFilter);\r\n                           }}\r\n                           color={color}>\r\n                {text}\r\n            </Button>\r\n        }\r\n\r\n        return <div>\r\n            <div className={'todoListTitle'}>\r\n                <h3><EditableSpan title={props.todoList.title} onChangeTitle={changeTodoListTitle}/></h3>\r\n                <IconButton onClick={removeTodoList} disabled={props.todoList.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n            <AddItemForm addItem={addTaskCallback} disabled={props.todoList.entityStatus === 'loading'}/>\r\n            <div>\r\n                {tasksForTodoList.map(task => <Task\r\n                    key={task.id}\r\n                    task={task} removeTask={removeTask}\r\n                    changeStatus={changeTaskStatus} todoListId={props.todoList.id}\r\n                    changeTaskTitle={changeTaskTitle}/>)}\r\n            </div>\r\n            <div>\r\n                {renderFilterButton(\"all\", \"default\", 'All')}\r\n                {renderFilterButton(\"active\", \"primary\", 'Active')}\r\n                {renderFilterButton(\"completed\", \"secondary\", 'Completed')}\r\n            </div>\r\n        </div>\r\n    }\r\n)\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {login} from \"./auth-reducer\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../state/store\";\r\nimport {authActions} from \"./index\";\r\n\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n\r\n    type FormErrorType = {\r\n        email: string\r\n        password: string\r\n        rememberMe: boolean\r\n        captcha?: string\r\n    }\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useAppDispatch()\r\n\r\n    const validate = (values: FormErrorType) => {\r\n        const errors: any = {};\r\n        if (!values.email) {\r\n            errors.email = 'Email is required';\r\n        }\r\n        /* else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n             errors.email = 'Invalid email address';\r\n         }*/\r\n        if (!values.password) {\r\n            errors.password = 'Password is required';\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(authActions.login(values));\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target='_blank' rel=\"noopener noreferrer\">here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport { Login } from './Login'\r\nimport {asyncActions as authAsyncActions, slice} from  './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    authSelectors,\r\n    authActions,\r\n    Login\r\n}\r\n\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport {AddItemForm} from \"../../common/AddItemsForm\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {TodoList} from \"../todoList/TodoList\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {authSelectors} from \"../../features/login\";\r\nimport {todoListsActions, todoListsSelectors} from \"./index\";\r\nimport {tasksSelectors} from \"../task\";\r\n\r\nimport {useActions} from \"../../state/store\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoLists: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n\r\n    const todoLists = useSelector(todoListsSelectors.selectTodoList);\r\n    const tasks = useSelector(tasksSelectors.selectTasks);\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const {addTodoListTC, fetchTodoListsTC} = useActions(todoListsActions)\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodoListsTC()\r\n    }, [demo, fetchTodoListsTC, isLoggedIn])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodoListTC}/>\r\n        </Grid>\r\n\r\n        <Grid container spacing={3}>{\r\n            todoLists.map(tl => {\r\n\r\n                    let tasksForTodoList = tasks[tl.id];\r\n\r\n                    return <Grid key={tl.id} item>\r\n                        <Paper style={{padding: \"10px\", backgroundColor: '#cfe8fc'}}>\r\n                            <TodoList\r\n                                todoList={tl}\r\n                                tasks={tasksForTodoList}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                }\r\n            )}\r\n        </Grid>\r\n    </>\r\n}\r\n","import {AppRootStateType} from \"../../state/store\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status;\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized;\r\n","import * as appSelectors from './selectors'\r\nimport {asyncActions as appAsyncActions, slice} from \"./app-reducer\";\r\n\r\n\r\nconst appActions = {\r\n    ...appAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\n\r\nexport {\r\n    appSelectors,\r\n    appActions\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {ErrorSnackbar} from \"../../common/Allert\";\r\nimport {TodoLists} from \"../todoLists/TodoLists\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Route} from 'react-router-dom';\r\nimport {authActions, authSelectors, Login} from \"../../features/login\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {TaskDomainType} from \"../task/tasks-reducer\";\r\nimport {appActions, appSelectors} from '.';\r\nimport {useActions} from \"../../state/store\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const AppWithRedux = ({demo = false}: PropsType) => {\r\n\r\n\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const status = useSelector(appSelectors.selectStatus)\r\n    const {initializeApp} = useActions(appActions)\r\n    const {logout} = useActions(authActions)\r\n\r\n\r\n    const isInitialized = useSelector(appSelectors.selectIsInitialized)\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    })\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logout}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color='secondary'/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodoLists demo={demo}/>}/>\r\n                <Route exact path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker'\r\nimport AppWithRedux from \"./components/app/AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <AppWithRedux/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}